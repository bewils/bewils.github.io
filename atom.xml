<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuki</title>
  <subtitle>Otaku</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-24T04:26:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bewils</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;无声告白&gt;</title>
    <link href="http://yoursite.com/2018/03/21/%E6%97%A0%E5%A3%B0%E5%91%8A%E7%99%BD/"/>
    <id>http://yoursite.com/2018/03/21/无声告白/</id>
    <published>2018-03-20T16:40:54.000Z</published>
    <updated>2018-03-24T04:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们终此一生, 就是要摆脱被人的期待, 找到真正的自己.</p>
</blockquote>
<p>半夜终于读完了这本书, 想发一条微博来特别纪念. 结果越写越长, 于是删掉了微博回到自己的老窝发一篇博客.</p>
<a id="more"></a>
<p>&lt;无声告白&gt;这本书虽然几年前就出版了, 但是我这种反应慢追不上潮流的人还是在2017年才翻开这本书.</p>
<p>第一次看这本书是在2017年的10月. 那个时候因为各种原因心理状态很不好, 看了标题以为是一个治愈的故事, 结果看了大概25%发现这是一个致郁的故事. 睡前读过后躺在床上满脑子都是书中的情节, 压抑的喘不过气, 想疯狂发泄想尝试从楼上自由落体的快感. 于是果断弃坑通宵打了一夜 dota (找到了玩游戏超棒的借口).</p>
<p>半年之后, 最近事情终于算是基本平静了下来, 于是重新拿起这本书. 花了几天的时间读完, 庆幸自己当初没有那么头铁硬读下去, 不然都不知道能不能活到今天.</p>
<p>(因为我是一个很讨厌剧透的人, 所以纠结了很久还是不打算讨论故事的内容, 直接写感想吧)</p>
<p>对于一本书是否好看, 每个人都有不同的看法. 如果这本书能够引起你的共鸣, 你就觉得它好看, 反之亦然. 所以在我看来这是一本很精彩的书, 不接受任何反驳, 而且也不关心他人的意见. 这本书给我带来的共鸣就是, 这简直就是我的故事嘛.</p>
<p>所以在看这本书的时候内心是处于一个很矛盾的状态, 一方面完全理解书中人的感受, 也知道这样发展下去的剧情走向; 另一方面呢又很害怕, 书中这样的境遇, 做出了这样的选择, 那么结局会是一个能令我自己接受的吗? 看完之后我又该何去何从? 读完后, 就结局而言, 我个人是不太喜欢这种看上去恢复平静, 用胶水把碎玻璃粘起来的结局. 但是仔细想一想, 人的心会累, 人的心也会死, 除了就这样吧也没什么办法, 那么就这样吧.</p>
<p>这个故事是一种极端情况的悲剧, 但是如果就算没这么极端, 也只是一个轻微的悲剧. 毕竟幸福不是罗马, 不是怎样都能到达的.</p>
<p>作为一个性格很不好, 与人相处不算合格的人, 我是勉勉强强生存到了现在, 感谢一路上遇到的人们. 虽然我一直觉得如果一个孩子性格不好人格畸形那一定是父母的错, 不过我已经这样没救了也没有必要盯着过去. 随着年龄的增大越来越多的考虑起未来, 也越来越害怕未来真的到来那天. 如果真的有了孩子不知该如何面对, 经济方面不能给孩子很好的条件, 成长方面也不知道要如何引导, 也不知道要如何与小孩子相处(所以我讨厌小孩子), 这样做父母一定是不合格的.</p>
<p>父母并不是把孩子生下来就成了父母, 并不是因为没有考试就是人人可以随意想做能做的.</p>
<p>想到这里更觉得未来暗淡, 浑然不知自己连女朋友都没有的事实.</p>
<p>出来念书的时候想的就是: 逃出来, 越远越好, 然后一个人活下去. 一个人生活过, 才知道自由果然是值得用生命去争取的东西. 能够活成自己想要的模样, 那是多么值得骄傲的事情. 活了20多年才明白这个道理, 才敢下定决心来过自己的生活, 果然愚蠢. 虽然愚蠢, 虽然还不知道自己是什么, 虽然还不知道自己能成为什么, 但是接下来通过慢慢摸索, 大概还是能活成自己, 自由的活下去吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们终此一生, 就是要摆脱被人的期待, 找到真正的自己.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;半夜终于读完了这本书, 想发一条微博来特别纪念. 结果越写越长, 于是删掉了微博回到自己的老窝发一篇博客.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Read" scheme="http://yoursite.com/tags/Read/"/>
    
  </entry>
  
  <entry>
    <title>一点网络基础</title>
    <link href="http://yoursite.com/2018/01/17/%E4%B8%80%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/17/一点网络基础/</id>
    <published>2018-01-17T15:03:41.000Z</published>
    <updated>2018-01-19T12:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来说一下写这篇文章的原因, 这两天读了 bang 的 <a href="http://blog.cnbang.net/tech/3531/" target="_blank" rel="external">http://blog.cnbang.net/tech/3531/</a> 这篇文章, 看到了移动端开发有关网络面临的许多问题, 意识到在眼界和探索问题方面还有很大的局限. 同时在阅读中还发现了很多概念性模糊的地方, 在此记录下来, 虽然这些并不能帮助写好一个 URLSession, 但是作为科普性了解一下还是不错的.</p>
<a id="more"></a>
<p>这篇文章也不算是站在一个很高的层次来概括性的讲述, 应该算是一步一步发现问题并学习的一个过程吧, 所以排版可能不是很正经, 但相信按照这个顺序读下来还是能够对网络有一点理解的.</p>
<p>注1: 下文中的<code>文章</code>一词都特指 bang 的那篇博客</p>
<p>注2: 本文假定读者均’大概知道’ DNS, TCP, IP, socket 等名词, 如果不了解请查找更基础的文章</p>
<h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2>
<p><code>文章</code>中关于速度的模块首先提到的就是 DNS 解析速度, 关于 DNS 先科普一点, IP 8.8.8.8 和 8.8.4.4 是两个 google 提供的两个免费的 DNS 服务器, 而 DNS 服务器的端口是 53, 在 mac 中通过 nslookup 可以通过 dns 来解析域名, 接下来利用这个命令做两个小实验</p>
<ol>
<li>通过默认 DNS (路由器) 来解析域名</li>
</ol>
<pre class="highlight"><code class="Shell">$ nslookup www.google.com
Server:		192.168.31.1
Address:	192.168.31.1#53

Non-authoritative answer:
Name:	www.google.com
Address: 31.13.71.7
</code></pre>
<ol start="2">
<li>修改 DNS IP(macOS 在系统网络设置中修改) 为 8.8.8.8 来解析域名</li>
</ol>
<pre class="highlight"><code class="shell">$ nslookup www.google.com
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.google.com
Address: 69.171.244.15
</code></pre>
<p>通过这两个命令可以看出通过 DNS 解析域名的时候会通过 53 号端口与 DNS 服务器进行通信, 收到解析后的域名 IP 就可以通过 IP 来访问真正要去访问的服务器了. 而且可以看到, 不同的 DNS 服务器会将域名解析为不同的 IP, 这里返回的是距离 DNS 服务器最近的这个域名的服务器的 IP, 通过这种分流方法可以让用户得到很好网速体验.</p>
<p>在<code>文章</code>中给出的方法是使用自己的 DNS 服务器, 减少域名的解析时间并且让用户连接距离最近的服务器来获得更好的连接效果.</p>
<p>那么到了这里就需要来实现自己的 DNS 系统了, 但是 Foundation 中的 Networking 部分关于 URLSession 的描述中写着 <code>The URLSession class natively supports the data, file, ftp, http, and https URL schemes</code> 很抱歉不支持 DNS 协议. 所以这时就需要写更底层的网络层代码, 接下来进入 socket 的部分.</p>
<h2 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> Socket</h2>
<p>这部分的话其实和 DNS 的关系倒不是很大, 只是通过跨平台通用的网络编程方案来分析一些网络中的基本概念.</p>
<p>在这部分我们将按照「Unix 网络编程(第三版)」中的第一个例子来进行分析, 这个例子中是利用 13 号端口来实现的时间查询. 在此把代码简化到服务器直接返回 ‘hello world’, 顺便也将端口改成了 1300</p>
<pre class="highlight"><code class="C"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span>

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>{
  <span class="keyword">int</span> listenfd, connfd;
  <span class="keyword">struct</span> sockaddr_in servaddr;
  <span class="keyword">char</span> buffer[] = <span class="string">"hello world!\n"</span>;
  
  listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);
  
  bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));
  servaddr.sin_family = AF_INET;
  <span class="comment">// htonl 和 htons 为了统一网络和系统的数据存储格式, 即大小端, 在此可以忽略</span>
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port = htons(<span class="number">1300</span>);
  
  bind(listenfd, (<span class="keyword">struct</span> sockaddr*) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));
  listen(listenfd, <span class="number">10</span>);
  
  <span class="keyword">while</span> (<span class="number">1</span>) {
    connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr*) <span class="literal">NULL</span>, <span class="literal">NULL</span>);
    write(connfd, buffer, <span class="built_in">strlen</span>(buffer));
    close(connfd);
  }
  
  <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
<p>可以看到就这个服务端程序来说还是很简单的</p>
<p>首先通过<code>int socket(int, int, int)</code>创建一个 listenfd, 三个参数分别为协议族(AF_INET 为 tcp, udp 等 internet 协议), 连接类型(SOCK_STREAM 流连接), 具体协议名(0 的时候系统会根据前两个参数自动选择, 在这个例子中通过前两个参数会自动选择 TCP 协议)</p>
<p>然后设置一个类型为<code>struct sockaddr_in</code>的变量, 这个 struct 中记录了包括 IP 地址和端口号这些信息(注: 在本地通信时可以通过进程 pid 进行通信, 但是在网络中 pid 冲突的可能性非常大, 因此会使用 IP + 协议 + 端口号 这套组合数据来进行定位), 这也就是 sockaddr_in 的作用, 顺便这个结构体是作用于 IPv4, IPv6 的版本为 sockaddr_in6</p>
<p>然后通过<code>bind</code>函数将 socket 和地址信息绑定起来, 并通过<code>listen</code>函数监听该端口</p>
<p>客户端请求连接时将会触发<code>accept</code>函数, 函数将返回连接信息, 通过这个连接信息就可以向客户端发送数据(<code>write</code>)以及主动断开连接(<code>close</code>)</p>
<h2 id="tcp"><a class="markdownIt-Anchor" href="#tcp"></a> TCP</h2>
<p>上面代码实现了 TCP 协议的服务器, 可以按照下图大致理解 TCP 的三次握手和 socket 的 API 之间的关系</p>
<p>SYN: Synchronous</p>
<p>ACK: Acknowledgement</p>
<p><img src="/images/%E4%B8%80%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1516290003397.jpg" alt=""></p>
<h2 id="telnet"><a class="markdownIt-Anchor" href="#telnet"></a> Telnet</h2>
<p>通过上面的部分成功利用 socket 搭建了一个服务器, 接下来需要有办法来验证这个服务器真的可以支持网络请求, 这里尝试使用 telnet</p>
<pre class="highlight"><code class="shell">$ telnet 127.0.0.1 1300
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
hello world!
Connection closed by foreign host.
</code></pre>
<p>telnet 是基于 TCP 的一个应用层协议, 同时也有命令行的工具, 直接使用 telnet + ip(域名) + 端口 可以通过 TCP 连接, 因为上面的这个服务器是运行在本地所以这里的 IP 使用的是 127.0.0.1 即 localhost 来进行连接</p>
<p>连接的结果是返回了我们输出的 hello world!, 并且收到消息后服务器就主动断开了连接</p>
<p>为了测试这部分最开始在 postman/ curl 中进行了尝试但是发现它们只能测试 HTTP 的接口, 而 TCP 的直连还是要用 telnet 来进行连接</p>
<h2 id="inaddr_any-ip"><a class="markdownIt-Anchor" href="#inaddr_any-ip"></a> INADDR_ANY, IP</h2>
<p>socket 部分的代码已经基本分析过了, 只剩下一个 magic value <code>INADDR_ANY</code>, 在创建要监听的地址的时候我们设置了这个值, 那么这个值有什么作用呢?</p>
<p>这个值的功能是监听这台计算机上的任意一个 IP, 那么这台电脑上还会有多个 IP 吗? 是的, 当电脑有多个网卡的时候就会有多个 IP, 在 mac 上可以通过<code>ifconfig</code>来查看</p>
<pre class="highlight"><code class="Shell">$ ifconfig
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384
	options=1203&lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&gt;
	inet 127.0.0.1 netmask 0xff000000
	inet6 ::1 prefixlen 128
	inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1
	nd6 options=201&lt;PERFORMNUD,DAD&gt;
en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
	ether f4:0f:24:3b:5d:19
	inet6 fe80::45d:45f9:3c38:bfba%en0 prefixlen 64 secured scopeid 0x8
	inet 192.168.31.107 netmask 0xffffff00 broadcast 192.168.31.255
	nd6 options=201&lt;PERFORMNUD,DAD&gt;
	media: autoselect
	status: active
...
</code></pre>
<p>这个命令真正的输出还有很多, 这里只截取其中比较容易的部分来展示, 可以自行尝试来查看结果</p>
<p><code>lo0</code>即 loopback 回环接口, 可以理解为计算机中的虚拟网卡, 因为是虚拟的所以在关闭网卡(数据不经过网卡)的时候也是可以使用, inet 字段即 IP 地址就是我们常说的 127.0.0.1, 也很方便我们平时来做本地测试</p>
<p><code>en0</code>就是一块网卡, 目前是因为连着 wifi 所以是无线网卡, IP 地址为 192.168.31.107</p>
<p>那么查看了本机的各种 IP 之后, 难道<code>INADDR_ANY</code>真的能够让我们在各个 IP 上都能连接成功? 这次来换 192.168.31.107 来测试</p>
<pre class="highlight"><code class="Shell">$ telnet 192.168.31.107 1300
Trying 192.168.31.107...
Connected to 192.168.31.107.
Escape character is '^]'.
hello world!
Connection closed by foreign host.
</code></pre>
<p>竟然真的连接成功并且返回了数据…</p>
<p>如果你的电脑上正在连接更多的网卡有更多的 IP 地址, 通过上面的方法都是可以连接的</p>
<p>实际上当设置 IP 地址为<code>INADDR_ANY</code> 的时候, socket 会自动去监听 0.0.0.0 这个 IP 即会去监听电脑上的所有 IP, 而 0.0.0.0 这个 IP 也是一个虚拟的 IP, 即我们<code>ping 0.0.0.0</code>是 ping 不通的</p>
<p>可以尝试将代码中的 INADDR_ANY 修改成特定的 IP 比如我们的公网 IP 或者本地 localhost, 修改后再用 telnet 连接就会发现这次服务器只会去监听那个特定的 IP 而不会全部包管了</p>
<h2 id="localhost-wireshark"><a class="markdownIt-Anchor" href="#localhost-wireshark"></a> localhost, wireshark</h2>
<p>接下来科普一下另一个本机的特殊 IP 127.0.0.1, 大家也习惯叫他 localhost, 但是为什么比如我们在浏览器和 postman 中敲入 localhost 和敲入 127.0.0.1 是等价的呢?</p>
<p>答案就在 <code>/ect/hosts/</code>文件中, 如果你没有因为科学上网而改过 hosts 文件, 那么直接打开文件里面应该只有这点内容</p>
<pre class="highlight"><code class="shell">$ cat hosts
# Localhost
127.0.0.1	localhost
::1	localhost
::1	ip6-localhost
::1	ip6-loopback
</code></pre>
<p>文件中只记录了 IP 为 127.0.0.1 的名字叫 localhost, 实际上这个文件就是一个本机的 DNS 系统嘛. localhost 就是域名, 127.0.0.1 就是 IP. 这也是为什么科学上网的时候可以通过修改 hosts 来看到一些不存在的网站, 改掉了 hosts 再去解析那些域名的时候回引向可以访问到的 IP, 就能看到些奇怪的东西了(</p>
<p>那么既然是这样是不是修改了 hosts 文件中的 IP 再解析 localhost 就会改变呢? 是的, 可以尝试将文件修改后再去 ping localhost 就可以看到已经被解析成了其他的 IP, 但是因为 localhost = 127.0.0.1 已经作为一个既定事实还是不要随便修改的好</p>
<p>那么最后, 既然 localhost(127.0.0.1) 作为 loopback 的连接是不走网卡的那我们来抓包看一下上面例子整个 TCP 连接的过程</p>
<p>进入 wireshark 之后选择对 lo0 进行抓包后确实是只能看到 127.0.0.1 的各种数据交换, 而且当关闭 wifi 还是不会有影响, 接下来进行一次本地的连接(端口为 1300 的是服务器程序, 60296 的是 telnet 即客户端程序)</p>
<p><img src="/images/%E4%B8%80%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1516294144820.jpg" alt=""></p>
<p>过程如下:</p>
<p>5~7 是 TCP 的三次握手</p>
<p>9 是服务器发送 hello world!</p>
<p>10 服务器主动断开连接</p>
<p>11~14 是客户端收到数据, 收到服务器的 FIN 后也断开连接, 向服务器发送 FIN, 最后服务器发送最后一个 ACK 彻底断开这次 TCP 连接</p>
<p>单独查看 9 的数据包:</p>
<p><img src="/images/%E4%B8%80%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1516294260778.jpg" alt=""></p>
<p>hello world!</p>
<h2 id="结"><a class="markdownIt-Anchor" href="#结"></a> 结</h2>
<p>总之, 单单一个网络中的 DNS 问题就能牵扯出来这么多的知识盲区. 如果实际去尝试解决问题还会有更多的知识需要掌握, 作为一个工程师还远不合格, 希望总有一天能够回答<code>文章</code>中提出的所有问题吧</p>
<p>另: 买的 C93 ⑧神的本子终于到了, 果然还是⑧神笔下的雪乃才是那个灵气的帅气的温柔的女孩子, 能用画笔把时间定格在这里真是太好了</p>
<p><img src="/images/%E4%B8%80%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/IMG_4388.JPG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来说一下写这篇文章的原因, 这两天读了 bang 的 &lt;a href=&quot;http://blog.cnbang.net/tech/3531/&quot;&gt;http://blog.cnbang.net/tech/3531/&lt;/a&gt; 这篇文章, 看到了移动端开发有关网络面临的许多问题, 意识到在眼界和探索问题方面还有很大的局限. 同时在阅读中还发现了很多概念性模糊的地方, 在此记录下来, 虽然这些并不能帮助写好一个 URLSession, 但是作为科普性了解一下还是不错的.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Basic" scheme="http://yoursite.com/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>&lt;代码之髓&gt;与Swift</title>
    <link href="http://yoursite.com/2017/12/17/%3C%E4%BB%A3%E7%A0%81%E4%B9%8B%E9%AB%93%3E%E4%B8%8ESwift/"/>
    <id>http://yoursite.com/2017/12/17/&lt;代码之髓&gt;与Swift/</id>
    <published>2017-12-17T13:12:30.000Z</published>
    <updated>2018-01-17T15:18:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在读一本叫&lt;代码之髓&gt;的书. 这本书很有趣, 就像它自己的描述: 编程语言 核心概念. 通过看这本书并不能精通所有的语言, 也不能写出美观健壮的代码, 但是可以让人从一个宏观的角度来观察一门语言.</p>
<p>书中的介绍顺序和任何一门语言书的顺序其实都是一样: 表达式, 流程控制, 类. 但是在读任何一本语言书的时候重点关注的都是这个语法’是什么’, 而&lt;代码之髓&gt;中则一定程度向我们展示了’为什么’是这个语法. 所以找一门语言对照着这本书来读会有更好的体验.</p>
<p>因为这本书成书较早, 当时还没有 Swift 这门语言, 又因笔者只会稍微写点 Swift, 所以这篇文章讨论的都是 Swift 的代码, 而且可能会有很多因为水平不够导致的不正确.</p>
<a id="more"></a>
<p>注1: 本文的每个主题名字都是书中的章节名, 便于更好的对照</p>
<p>注2: 书中表现的另一个很重要的观点就是, 通过了解语法的’为什么’, 并且进行多门语言的比较, 来认清一个现实: 没有什么是绝对正确理所当然的, 一切只是为了解决问题</p>
<h3 id="语法的诞生"><a class="markdownIt-Anchor" href="#语法的诞生"></a> 语法的诞生</h3>
<p>这一章中作者讨论了两门上古语言 FORTH 和 Lisp, 二者分别代表了两种语法解析方式: <code>栈机器</code>与<code>语法树</code>, 虽然在编译原理中在语法分析的部分都是使用了语法树, 这在现代语言中也被普遍运用, 但就像书中指出的 Python, Ruby 和 Java 这些语言还是在使用栈机器解析语法, 个人感觉解释型的脚本语言(可能比如 JS) 可能都是是通过这种栈机器来解析语法的, 毕竟顺序执行不需要对整个程序进行宏观的解析.</p>
<p>至于在 Swift 中, 就是比较标准的语法树了, 在这里举个例子:</p>
<pre class="highlight"><code class="swift"><span class="comment">// test.swift</span>
<span class="number">1</span> + <span class="number">2</span>
</code></pre>
<p>在命令行中执行<code>swiftc -dump-ast test.swift</code>后可以看到输出如下(虽然只有一行代码但 Swift 解析出的语法树还是很大, 在此只截取一小段):</p>
<pre class="highlight"><code class="">(source_file
  (top_level_code_decl
    (brace_stmt
      (binary_expr type='Int' location=test.swift:1:3 range=[test.swift:1:1 - line:1:5] nothrow
        (dot_syntax_call_expr implicit type='(Int, Int) -&gt; Int' location=test.swift:1:3 range=[test.swift:1:3 - line:1:3] nothrow
          (declref_expr type='(Int.Type) -&gt; (Int, Int) -&gt; Int' location=test.swift:1:3 range=[test.swift:1:3 - line:1:3] decl=Swift.(file).Int.+ function_ref=unapplied)
          (type_expr implicit type='Int.Type' location=test.swift:1:3 range=[test.swift:1:3 - line:1:3] typerepr='Int'))
</code></pre>
<p>虽然很多无关的内容有很多, 但还是可以大体看出来这一段语法树主要解析出了<code>+</code>这个函数的类型为<code>(Int, Int) -&gt; Int</code>, 原型为<code>Swift.Int.+</code></p>
<h3 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h3>
<p>这一章中讨论了两个很有趣的内容, 一个是关于微软公司</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在读一本叫&amp;lt;代码之髓&amp;gt;的书. 这本书很有趣, 就像它自己的描述: 编程语言 核心概念. 通过看这本书并不能精通所有的语言, 也不能写出美观健壮的代码, 但是可以让人从一个宏观的角度来观察一门语言.&lt;/p&gt;
&lt;p&gt;书中的介绍顺序和任何一门语言书的顺序其实都是一样: 表达式, 流程控制, 类. 但是在读任何一本语言书的时候重点关注的都是这个语法’是什么’, 而&amp;lt;代码之髓&amp;gt;中则一定程度向我们展示了’为什么’是这个语法. 所以找一门语言对照着这本书来读会有更好的体验.&lt;/p&gt;
&lt;p&gt;因为这本书成书较早, 当时还没有 Swift 这门语言, 又因笔者只会稍微写点 Swift, 所以这篇文章讨论的都是 Swift 的代码, 而且可能会有很多因为水平不够导致的不正确.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Basic" scheme="http://yoursite.com/tags/Basic/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>CGAffineTransform 介绍</title>
    <link href="http://yoursite.com/2017/09/01/CGAffineTransform/"/>
    <id>http://yoursite.com/2017/09/01/CGAffineTransform/</id>
    <published>2017-08-31T16:05:43.000Z</published>
    <updated>2017-09-02T09:53:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又在写动画; 最近写动画又遇到了这个莫名其妙的东西; 最近终于了解了一些这个东西;</p>
<p>于是记录一下, 毕竟基础太差好不容易弄明白很怕过段时间就忘了</p>
<p>在做动画的时候很经常使用 <code>CGAffineTransform</code> 这个 struct. UIView 有一个属性 <code>var transform: CGAffineTransform</code> , 我们可以在对 UIView 做动画的时候修改这个属性来使 UIView 进行移动, 旋转, 缩放等动画. 但很多时候我们只是简单地使用如 <code>CGAffineTransform(rotationAngle: CGFloat)</code> 这些自带的方法来进行变换. 接下来会比较详细地讨论一下关于这个 struct 的一些细节.</p>
<a id="more"></a>
<h2 id="affine-transformation"><a class="markdownIt-Anchor" href="#affine-transformation"></a> Affine Transformation</h2>
<p>这个看起来很神奇的名字, 翻译成中文的话就是<strong>仿射变换</strong>(虽然不了解但应该都听说过, 反正很厉害的样子). 知道了名字之后瞬间亲切了很多, 好像会了一样<s>醒醒吧</s>. <em>Affine</em> 源自拉丁文, 翻译成英文就是 <em>connected with</em>. Affine transformation 指在几何中, 一个向量空间进行一次线性变换并接上一个平移, 变换为另一个向量空间</p>
<h2 id="homogenous-coordinates"><a class="markdownIt-Anchor" href="#homogenous-coordinates"></a> Homogenous coordinates</h2>
<p>齐次坐标, 也叫投影坐标. 这个坐标系实际上就是在笛卡尔坐标系中再增加一维, 比如二维笛卡尔坐标系中的 (3, 4) 在齐次坐标系中可以写成 (3, 4, 1) 或者 (6, 8, 2) 或者其他的什么. 可以看到, 增加的最后一维就是坐标系定义的 multiplier. 齐次坐标转笛卡尔坐标就直接 (x, y, w) =&gt; (x/w, y/w) 就可以了</p>
<p>使用齐次坐标的一个好处是可以表示无穷远, 在笛卡尔坐标系中无穷远是没有一个很好地办法来表示, 总是需要一个 Float.Infinite 这样定义的无穷大常量来表示. 而在齐次坐标系中只需要将 multiplier 设为 0 即可, (3, 4, 0) 就可以用来表示无穷远的点. 所以也被称为投影坐标, 因为和真实的投影一样, 在齐次坐标中可以表示无穷远, 同时也可以表示平行线在无穷远处的相交</p>
<p>另一个好处是利用齐次坐标系可以通过一次矩阵乘法达到平移的效果(因为多出的一维就相当于常数, 直接乘偏移量就可以), 而如果普通的二维坐标则需要一次矩阵乘法和一次矩阵加法, 即可以用一次乘法实现仿射变换(可以参考下面的平移矩阵)</p>
<h2 id="cgaffinetransform"><a class="markdownIt-Anchor" href="#cgaffinetransform"></a> CGAffineTransform</h2>
<p>前面简单介绍了下背景知识, 这部分将按照官方文档来介绍一下 CGAffineTransform 的使用方法.</p>
<p>仿射变换的矩阵形式如下, 因为第 3 列永远是 (0, 0, 1) 因此 struct 内只保存前两列的 6 个值.</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>a</mi></mrow></mtd><mtd><mrow><mi>b</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi>c</mi></mrow></mtd><mtd><mrow><mi>d</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><msub><mi>t</mi><mrow><mi>x</mi></mrow></msub></mrow></mtd><mtd><mrow><msub><mi>t</mi><mrow><mi>y</mi></mrow></msub></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} a &amp; b &amp; 0 \\ c &amp; d &amp; 0 \\ t_{x} &amp; t_{y} &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">a</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">c</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">b</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">d</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<p>而需要变换的坐标使用齐次坐标表示, multiplier 就简单地使用 1, 即通过下面的矩阵乘法来从原坐标求出新的坐标</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><msup><mi>x</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup></mrow></mtd><mtd><mrow><msup><mi>y</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>x</mi></mrow></mtd><mtd><mrow><mi>y</mi></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>×</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>a</mi></mrow></mtd><mtd><mrow><mi>b</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi>c</mi></mrow></mtd><mtd><mrow><mi>d</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><msub><mi>t</mi><mrow><mi>x</mi></mrow></msub></mrow></mtd><mtd><mrow><msub><mi>t</mi><mrow><mi>y</mi></mrow></msub></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} x&#x27; &amp; y&#x27; &amp; 1 \end{bmatrix} = \begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix}\times\begin{bmatrix} a &amp; b &amp; 0 \\ c &amp; d &amp; 0 \\ t_{x} &amp; t_{y} &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mbin">×</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">a</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">c</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">b</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">d</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<p>得到了两个坐标之间的对应关系:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x&#x27; = ax + by + t_{x}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.801892em;"></span><span class="strut bottom" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo>=</mo><mi>c</mi><mi>x</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">y&#x27; = cx + dy + t_{y}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.801892em;"></span><span class="strut bottom" style="height:1.088em;vertical-align:-0.286108em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">c</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p>所以, 其实使用 CGAffineTransform 就是通过修改变换矩阵的值来实现不同的图像变换, 而下面这几个函数只是 Apple 提供的几个预定好的矩阵, 通过修改参数即可很方便地使用</p>
<pre class="highlight"><code class="swift"><span class="keyword">init</span>(rotationAngle: <span class="type">CGFloat</span>)
<span class="keyword">init</span>(scaleX: <span class="type">CGFloat</span>, y: <span class="type">CGFloat</span>)
<span class="keyword">init</span>(translationX: <span class="type">CGFloat</span>, y: <span class="type">CGFloat</span>)
</code></pre>
<h3 id="rotate"><a class="markdownIt-Anchor" href="#rotate"></a> Rotate</h3>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mtd><mtd><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mtd><mtd><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} cos\alpha &amp; sin\alpha &amp; 0 \\ -sin\alpha &amp; cos\alpha &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord">−</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<p>旋转的矩阵就是这样, 然后来看看为什么长成这样(顺便<s>复习</s>预习下中学数学, 突然发现三角函数都还给老师了好伤心)</p>
<p>在平面坐标系中, <code>(x, y)</code> 经过旋转了 α 角度变成了 <code>(x', y')</code>, 该点到原点的距离为 <code>r</code></p>
<p><img src="http://ouqin1qvl.bkt.clouddn.com/IMG_36472.jpg?imageslim" alt=""></p>
<p>于是有如下对应关系:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo>=</mo><mi>r</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo>)</mo><mo>=</mo><mi>r</mi><mo>(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mo>)</mo><mo>=</mo><mi>x</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mo>−</mo><mi>y</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">x&#x27; = rcos(\alpha+\beta) = r(cos\alpha cos\beta - sin\alpha sin\beta) = xcos\alpha - ysin\alpha
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.801892em;"></span><span class="strut bottom" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mbin">−</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">x</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo>=</mo><mi>r</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo>)</mo><mo>=</mo><mi>r</mi><mo>(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi><mo>)</mo><mo>=</mo><mi>x</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi><mo>+</mo><mi>y</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">y&#x27; = rsin(\alpha + \beta) = r(sin\alpha cos\beta + cos\alpha sin\beta) = xsin\alpha + ycon\alpha
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.801892em;"></span><span class="strut bottom" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mbin">+</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">x</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span></span></span></p>
<p>然后用上面预定的矩阵直接和 <code>[x, y, 1]</code> 相乘, 就会发现对应结果也是这样(很奇妙, 对计算机图形学肃然起敬)</p>
<p>接下来的 scale 和 translation 就没什么难度所以就直接放变换矩阵了, 可以试试和 <code>[x, y, 1]</code> 相乘能否得到变换成功的坐标</p>
<h3 id="scale"><a class="markdownIt-Anchor" href="#scale"></a> Scale</h3>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><msub><mi>s</mi><mrow><mi>x</mi></mrow></msub></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><msub><mi>s</mi><mrow><mi>y</mi></mrow></msub></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} s_{x} &amp; 0 &amp; 0 \\ 0 &amp; s_{y} &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<h3 id="translation"><a class="markdownIt-Anchor" href="#translation"></a> Translation</h3>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><msub><mi>t</mi><mrow><mi>x</mi></mrow></msub></mrow></mtd><mtd><mrow><msub><mi>t</mi><mrow><mi>y</mi></mrow></msub></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ t_{x} &amp; t_{y} &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<h2 id="扩展"><a class="markdownIt-Anchor" href="#扩展"></a> 扩展</h2>
<p>由于 Apple 在 CGAffineTransform 中只预先设定了这三种变换矩阵, 因此如果想实现其他功能的矩阵可以通过 <code>init(a: CGFloat, b: CGFloat, c: CGFloat, d: CGFloat, tx: CGFloat, ty: CGFloat)</code> 这个函数来自定义, 这里就简单举几个例子</p>
<h3 id="x-轴对称-y-轴对称"><a class="markdownIt-Anchor" href="#x-轴对称-y-轴对称"></a> X 轴对称 / Y 轴对称</h3>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mo>−</mo><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mo>−</mo><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; -1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\quad
\begin{bmatrix} -1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord">−</span><span class="mord mathrm">1</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord">−</span><span class="mord mathrm">1</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<h3 id="shear"><a class="markdownIt-Anchor" href="#shear"></a> Shear</h3>
<p>如果单独改变 b / c 就是单个方向上的扭曲, 同时修改就是混合扭曲</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mi>b</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi>c</mi></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\begin{bmatrix} 1 &amp; b &amp; 0 \\ c &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\quad
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">c</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">b</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist"><span style="top:-1.2099999999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.00999999999999951em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">0</span></span></span><span style="top:1.1900000000000006em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing mult"><span class="vlist"><span style="top:0.9049999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-0.89502em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="mord mspace quad"></span></span></span></span></span></p>
<p>可以使用类似这样的代码来测试效果, 也可以通过修改矩阵做出自定义的变换效果</p>
<pre class="highlight"><code class="swift"><span class="type">UIView</span>.animate(withDuration: <span class="number">2</span>) {
  <span class="comment">// x 轴对称</span>
  view.transform = <span class="type">CGAffineTransform</span>(a: <span class="number">1</span>, b: <span class="number">0</span>, <span class="built_in">c</span>: <span class="number">0</span>, d: -<span class="number">1</span>, tx: <span class="number">0</span>, ty: <span class="number">0</span>)
}
</code></pre>
<p>关于 CGAffineTransform 的介绍大概就是这样了, 因为在计算机图形中图像变换的实现基本都是通过仿射变换在齐次坐标中的, 所以这种通过修改矩阵的方法基本上是通用的, 想起来两年前开始写 CSS 动画的时候就遇到过可以修改矩阵参数来执行动画, 可一直都没弄懂过, 这次也顺便解决了这个疑惑吧</p>
<blockquote>
<p>在写这篇文章的时候因为有大量的数学公式, 原本打算像 Apple 官网那样用图片来解决, 后来觉着麻烦还是用 Latex</p>
<p>然后找到了这个 hexo 的插件, 亲测还是蛮好用的, 就如这篇博客中的样子</p>
<p>地址: <a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus" target="_blank" rel="external">hexo-render-markdown-it-plus</a>, 除了 Latex 还支持了一些其他的很方便的渲染</p>
<p>顺便一提, 安装之后发现渲染问题是因为这个插件不附带 CSS 和字体文件…去 <a href="https://github.com/Khan/KaTeX" target="_blank" rel="external">Katex</a> 把这些文件下载下来加进去就行了</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又在写动画; 最近写动画又遇到了这个莫名其妙的东西; 最近终于了解了一些这个东西;&lt;/p&gt;
&lt;p&gt;于是记录一下, 毕竟基础太差好不容易弄明白很怕过段时间就忘了&lt;/p&gt;
&lt;p&gt;在做动画的时候很经常使用 &lt;code&gt;CGAffineTransform&lt;/code&gt; 这个 struct. UIView 有一个属性 &lt;code&gt;var transform: CGAffineTransform&lt;/code&gt; , 我们可以在对 UIView 做动画的时候修改这个属性来使 UIView 进行移动, 旋转, 缩放等动画. 但很多时候我们只是简单地使用如 &lt;code&gt;CGAffineTransform(rotationAngle: CGFloat)&lt;/code&gt; 这些自带的方法来进行变换. 接下来会比较详细地讨论一下关于这个 struct 的一些细节.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Basic" scheme="http://yoursite.com/tags/Basic/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中的多线程</title>
    <link href="http://yoursite.com/2017/08/26/iOS%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/26/iOS中的多线程/</id>
    <published>2017-08-26T06:10:42.000Z</published>
    <updated>2017-11-21T14:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS 中, 我们经常会把比较耗时的操作通过异步的方式运行, 最主要的使用场合大概就是网络通信了</p>
<p>我们可能都会写过这样的代码:</p>
<pre class="highlight"><code class="Swift"><span class="type">DispatchQueue</span>.global().async {
  <span class="comment">// get data from networking</span>
  <span class="type">DispatchQueue</span>.main.async {
    <span class="comment">// update ui</span>
  }
}
</code></pre>
<a id="more"></a>
<p>在 iOS 的很多教程, 包括著名的斯坦福公开课 CS193P 里面关于多线程的课程也使用了这样的 GCD 代码. 当时理所当然得接受了这个, 认为这个就像冒泡排序一样的模板, 遇到了直接背上去就可以.</p>
<p>直到实习面试的时候倒背如流这段代码后被问到了一个问题, 那么为什么<code>用这样的 GCD 代码就能开启多线程呢?</code>(笑容渐渐消失…)</p>
<p>这篇文章的目的其实主要就是去寻找为什么, 而不是关于多线程的具体使用, 具体使用的话预计接下来会写一篇关于使用 GCD 的文章</p>
<h2 id="概览"><a class="markdownIt-Anchor" href="#概览"></a> 概览</h2>
<p><img src="http://ouqin1qvl.bkt.clouddn.com/1503731690955.jpg?imageslim" alt="iOS 多线程"></p>
<p>iOS 中的多线程的结构大概就是这样, 每一层都对上一层进行了封装, 接下来将一层一层进行分析</p>
<h2 id="mach"><a class="markdownIt-Anchor" href="#mach"></a> Mach</h2>
<p>Mach 最早是 CMU 开发的操作系统微内核, 但现在基本上是作为其他类似操作系统的标准而存在</p>
<p>Apple 在 2000 年开源了一个叫 Darwin 的操作系统, Darwin 就是实现了 Mach 的架构. 而且 Darwin 也同时作为 macOS 和 iOS 的核心, 因此在 iOS 的操作系统内核直接与 CPU 进行控制的部分就是 Mach, 直接控制线程的部分就是这里</p>
<h2 id="pthread"><a class="markdownIt-Anchor" href="#pthread"></a> pthread</h2>
<p>POSIX Threads 是一个跨平台的线程标准, 定义了创建和操作线程的一套 API</p>
<p>支持包括 Linux, Windows, macOS 等各种系统, 使用的时候只需要引入<code>pthread.h</code> 即可</p>
<p>但由于是纯 C 库, 在 OC 中使用尚可忍受, 在 Swift 中…(算了, 就当无事发生过</p>
<h2 id="thread"><a class="markdownIt-Anchor" href="#thread"></a> Thread</h2>
<p>也就是过去的 NSThread, 是在 pthread 上封装了一层, 用面向对象的方式直接将线程和代码做了映射</p>
<p>通过 Thread 的 API 可以直接创建线程, 设置运行在子线程上的代码, 并且可以关闭子线程</p>
<p>通过 Thread 可以直接对线程进行管理, 不过坏处也就是什么都需要手动管理</p>
<h2 id="dispatch"><a class="markdownIt-Anchor" href="#dispatch"></a> Dispatch</h2>
<p>就是过去的 GCD, GCD(Grand Central Dispatch) 是 Apple 开发的一个多线程编程的解决方案. 通过将任务抽象为队列的方法, GCD 可以让程序员在不直接操作线程即可完成并发编程</p>
<p>只需要简单地设置队列是<code>串行/并行</code> <code>同步/异步</code>然后加入要执行的操作(block/closure), GCD 内部会自动根据这些设置来创建线程, 并且会自行决定开多少个线程, 完全的对外隐藏内部的复杂操作, 可以将编程的关注点聚焦于任务的处理</p>
<p>另: GCD 是纯 C 的 API, 是在 pthread 上加入队列和任务的管理. 使用大概是这样:</p>
<pre class="highlight"><code class="swift">dispatch_async(dispatch_get_main_queue(), {
  <span class="comment">// update ui</span>
})
</code></pre>
<p>但是这种纯 C 的代码与 Swift 的编程风格格格不入, 所幸在 Swift3 推出的时候, Apple 在 GCD 的基础上加入了面向对象的特点, 也就变成了现在的 Dispatch Framework</p>
<pre class="highlight"><code class="swift"><span class="type">Dispatch</span>.main.async {
    <span class="comment">// update ui</span>
}
</code></pre>
<h2 id="operationqueue"><a class="markdownIt-Anchor" href="#operationqueue"></a> OperationQueue</h2>
<p>过去的 NSOperationQueue, 一个很尴尬的东西. 最初是封装了 GCD 为 GCD 添加了面向对象的特性, 将要添加的操作封装为 Operation, 然后直接添加到 OperationQueue 中并且设置<code>串行/并行</code>即可执行</p>
<p>说了这么多(好像和 GCD 的功能差不多的样子?..</p>
<p>确实是这样…在 OC 中因为 OperationQueue 提供了面向对象的使用方式, 并且相比于 GCD 更关键的一点是封装后的 Operation 是支持 start, cancel 等操作以及运行状态 isCancelled, isExecuting, isFinished 的判断, 使任务有了很好地可控性. 当然实际上 GCD 也是支持这种功能的, 但是在 C 的 API 下使用起来会很困难, 因此在 OC 中大多会用 OperationQueue 的方法开进行多线程编程</p>
<p>然而 Swift3 中 Apple 提供了 Dispatch Framework, 不但提供了基础的面向对象的接口, 而且也提供了和 Operation 基本等价的 DispatchWorkItem, 这样 OperationQueue 对 GCD 的优势基本为 0, 这也就是 Swift 中为什么大家都喜欢用 GCD</p>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>iOS 中的多线程的运作模式基本上就是上面写的这些. 通过层层的封装 Apple 提供了对程序员很友好, 使用便捷的接口, 但在日常使用的同时还是希望能了解它们内部的原理. 如果其他人看了这篇文章也能学到 iOS 的多线程, 无论在工作中还是面试中能够用上, 那还是很好的</p>
<p>而且希望能将脱节的理论和实际联系起来</p>
<p>毕竟学习的时候就只是学到了 ‘利用 CPU 开启线程提高并发度’ 这种不痛不痒的东西</p>
<p>然后使用的时候就直接 Dispatch.main.async 就跑起来了</p>
<p>希望读完这篇文章能够了解这两者之间的关系</p>
<p>PS: 开始实习之后越发感觉到自己的基础不好…要补的有点多</p>
<h3 id="20171121-追加"><a class="markdownIt-Anchor" href="#20171121-追加"></a> 2017/11/21 追加</h3>
<p>上面对于 Operation 的描述有一定的遗漏, Operation 相比于 Dispatch(framework) 还是有一定的优势, 除了同样可以控制任务的进行取消还有以下优点</p>
<ol>
<li>支持依赖, 很像 Promise 的方式, 当前一个 Operation 做完才开始下一个</li>
</ol>
<pre class="highlight"><code class="swift"><span class="comment">// Custom Operation</span>
@implementation <span class="type">YourOperation</span>

-(void)start {
  _notDone = <span class="type">NO</span>;
  <span class="comment">// 打印开始执行的时间</span>
  <span class="type">NSLog</span>(@<span class="string">"%lf"</span>, <span class="type">CFAbsoluteTimeGetCurrent</span>());
  <span class="comment">// 等待 2s 后手动停止 Operation</span>
  dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, (int64_t)(<span class="number">2</span> * <span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^{
    _notDone = <span class="type">YES</span>;
  });
  
  [<span class="keyword">super</span> start];
}

-(void)main {
  <span class="comment">// Operation 判断结束的方法是判断 main 是否返回</span>
  <span class="comment">// 因此通过 while + bool 即可手动控制  operation 异步执行</span>
  <span class="keyword">while</span> (!_notDone &amp;&amp; !<span class="keyword">self</span>.isCancelled) {
  }
}

@end

<span class="comment">// Usage in VC</span>
@implementation <span class="type">ViewController</span>

- (void)viewDidLoad {
  [<span class="keyword">super</span> viewDidLoad];
  
  <span class="type">NSOperationQueue</span> *queue = [<span class="type">NSOperationQueue</span> new];
  <span class="type">YourOperation</span> *operation1 = [<span class="type">YourOperation</span> new];
  <span class="type">YourOperation</span> *operation2 = [<span class="type">YourOperation</span> new];
  
  [queue addOperation:operation1];
  [queue addOperation:operation2];
  <span class="comment">// operation3 依赖于 operation1, operation2, 即当两个任务做完后才开始做</span>
  <span class="type">YourOperation</span> *operation3 = [<span class="type">YourOperation</span> new];
  [operation3 addDependency:operation1];
  [operation3 addDependency:operation2];
  
  [queue addOperation:operation3];
}

@end
</code></pre>
<ol start="2">
<li>高度自定义, 通过上面的例子也可以看出通过自己实现 Operation 可以手动控制执行流程, 可以控制执行时间等各种细节, 而 DispatchWorkItem 则不可以, 因为 Operation 的 access control 为 <code>open</code> 但 DispatchWorkItem 的 access control 为 <code>public</code> 无法被继承.</li>
</ol>
<p>关于多线程更多细节推荐 <a href="https://www.objc.io/issues/2-concurrency/" target="_blank" rel="external">https://www.objc.io/issues/2-concurrency/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS 中, 我们经常会把比较耗时的操作通过异步的方式运行, 最主要的使用场合大概就是网络通信了&lt;/p&gt;
&lt;p&gt;我们可能都会写过这样的代码:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;Swift&quot;&gt;&lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.global().async {
  &lt;span class=&quot;comment&quot;&gt;// get data from networking&lt;/span&gt;
  &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {
    &lt;span class=&quot;comment&quot;&gt;// update ui&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>记一次动画封装</title>
    <link href="http://yoursite.com/2017/08/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8A%A8%E7%94%BB%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2017/08/24/记一次动画封装/</id>
    <published>2017-08-24T14:29:28.000Z</published>
    <updated>2018-03-20T16:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>⚠️ <strong>警告</strong>: 本文中的代码非常恶心, 可能引起身体不适, 请谨慎阅读(当然本文的代码主要就是想恶心到人), 当然如果能够坚持看下去, 说不定会变舒服</p>
<p>最近在公司的项目中需要将动画封装来使用, 主要需求有两个:</p>
<ol>
<li>像 SKAction 一样支持, start, pause, resume, cancel</li>
<li>统一 UIView 和 CALayer 的动画</li>
</ol>
<p>然后开始进行了封装, 最后总算是写完了吧, 写的过程中向公司的同事学习了很多</p>
<p>因此写了这篇文章, 主要想记录一下让代码从能运行到写起来和用起来都很舒服的一个过程吧</p>
<a id="more"></a>
<p>也明白了作为全公司最菜的还有很多要学的</p>
<p>下面使用简化代码进行演示, 只封装 UIView 的动画</p>
<h2 id="v10"><a class="markdownIt-Anchor" href="#v10"></a> V1.0</h2>
<pre class="highlight"><code class="swift"><span class="keyword">typealias</span> <span class="type">AnimationBlock</span> = (<span class="type">UIView</span>) -&gt; <span class="type">Void</span>
<span class="keyword">typealias</span> <span class="type">CompletionBlock</span> = (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>

<span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>{
  <span class="comment">// 各种动画的属性, 保存下来在 start 的时候才开始真正的动画</span>
  <span class="keyword">let</span> view: <span class="type">UIView</span>
  <span class="keyword">let</span> duration: <span class="type">TimeInterval</span>
  <span class="keyword">var</span> timingFunction: <span class="type">UIViewAnimationOptions</span> = []
  <span class="keyword">let</span> animation: <span class="type">AnimationBlock</span>
  <span class="keyword">var</span> completion: <span class="type">CompletionBlock</span>?
  
  <span class="comment">// 初始化</span>
  <span class="keyword">init</span>(<span class="number">_</span> view: <span class="type">UIView</span>, duration: <span class="type">TimeInterval</span>, timingFunction: <span class="type">UIViewAnimationOptions</span> = [], animation: @escaping <span class="type">AnimationBlock</span>, completion: <span class="type">CompletionBlock</span>? = <span class="literal">nil</span>) {
    <span class="keyword">self</span>.view = view
    <span class="keyword">self</span>.duration = duration
    <span class="keyword">self</span>.timingFunction = timingFunction
    <span class="keyword">self</span>.animation = animation
    <span class="keyword">self</span>.completion = completion
  }
  
  <span class="comment">// 真正开始动画</span>
  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> {
    <span class="type">UIView</span>.animate(withDuration: duration, delay: <span class="number">0</span>, options: timingFunction, animations: {
      <span class="keyword">self</span>.animation(<span class="keyword">self</span>.view)
    }, completion: completion)
  }
}

<span class="class"><span class="keyword">extension</span> <span class="title">Animation</span> </span>{
  <span class="comment">// 两个预先定义好的 fadeOut 和 moveBy 动画</span>
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fadeOut</span><span class="params">(<span class="number">_</span> view: UIView, duration: TimeInterval, timingFunction: UIViewAnimationOptions = [], completion: CompletionBlock? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Animation</span> {
    <span class="keyword">return</span> <span class="type">Animation</span>(view, duration: duration, timingFunction: timingFunction, animation: { $<span class="number">0</span>.alpha = <span class="number">0</span> }, completion: completion)
  }
  
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">moveBy</span><span class="params">(x: CGFloat, y: CGFloat, <span class="number">_</span> view: UIView, duration: TimeInterval, timingFunction: UIViewAnimationOptions = [], completion: CompletionBlock? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Animation</span> {
    <span class="keyword">return</span> <span class="type">Animation</span>(view, duration: duration, timingFunction: timingFunction, animation: {
      <span class="keyword">let</span> newX = $<span class="number">0</span>.center.x + x
      <span class="keyword">let</span> newY = $<span class="number">0</span>.center.y + y
      $<span class="number">0</span>.center = <span class="type">CGPoint</span>(x: newX, y: newY)
    }, completion: completion)
  }
}

</code></pre>
<p>然后开始使用, 使用的过程还是蛮舒心的:</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> view = <span class="type">UIView</span>()
<span class="type">Animation</span>.fadeOut(view, duration: <span class="number">2</span>).start()
<span class="type">Animation</span>.moveBy(x: <span class="number">20</span>, y: <span class="number">40</span>, view, duration: <span class="number">4</span>).start()
</code></pre>
<p>可以预见, 继续这样写下去包括 rotate, scale, moveTo 等函数都可以无脑写完</p>
<p>但是遇到了第一个问题, 每个动画函数都要附带所有动画的参数, 并且还有带上每种特定动画的额外参数, 然后再将这些动画原封不动地传入构造函数, 真的是很恶心</p>
<h2 id="v20"><a class="markdownIt-Anchor" href="#v20"></a> V2.0</h2>
<p>有大量公共的参数, 只有少数不同的参数需要调整, 想到可以使用 <code>柯里化</code> 来解决这个问题, 本文只是记录写代码的过程, 如果不了解的请自行学习</p>
<p>修改 extension 中的代码如下:</p>
<pre class="highlight"><code class="swift"><span class="keyword">typealias</span> <span class="type">AnimationInitBlock</span> = (<span class="type">UIView</span>, <span class="type">TimeInterval</span>, <span class="type">UIViewAnimationOptions</span>, <span class="type">CompletionBlock</span>?) -&gt; <span class="type">Animation</span>
<span class="class"><span class="keyword">extension</span> <span class="title">Animation</span> </span>{
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">generateAnimationWithBlock</span><span class="params">(block: @escaping AnimationBlock)</span></span> -&gt; <span class="type">AnimationInitBlock</span> {
    <span class="keyword">return</span> { view, duration, timingFunction, completion <span class="keyword">in</span>
      <span class="keyword">return</span> <span class="type">Animation</span>(view, duration: duration, timingFunction: timingFunction, animation: block, completion: completion)
    }
  }
  
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fadeOut</span><span class="params">()</span></span> -&gt; <span class="type">AnimationInitBlock</span> {
    <span class="keyword">return</span> <span class="type">Animation</span>.generateAnimationWithBlock { $<span class="number">0</span>.alpha = <span class="number">0</span> }
  }
  
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">moveBy</span><span class="params">(x: CGFloat, y: CGFloat)</span></span> -&gt; <span class="type">AnimationInitBlock</span> {
    <span class="keyword">return</span> <span class="type">Animation</span>.generateAnimationWithBlock {
      <span class="keyword">let</span> newX = $<span class="number">0</span>.center.x + x
      <span class="keyword">let</span> newY = $<span class="number">0</span>.center.y + y
      $<span class="number">0</span>.center = <span class="type">CGPoint</span>(x: newX, y: newY)
    }
  }
}
</code></pre>
<p>经过这次的修改, 将恶心的垃圾扔到统一的地方了, 每个特定的动画函数只需要传一个动画内容的闭包就可以了, 但还是有两个比较麻烦的问题:</p>
<ol>
<li>
<p>因为通过柯里化将函数拆成两段, 在使用的时候需要连续调用, 看起来不是很直观(友好</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> view = <span class="type">UIView</span>()
<span class="type">Animation</span>.fadeOut()(view, <span class="number">2</span>, .curveEaseInOut, <span class="literal">nil</span>).start()
<span class="type">Animation</span>.moveBy(x: <span class="number">20</span>, y: <span class="number">40</span>)(view, <span class="number">4</span>, .curveEaseInOut, <span class="literal">nil</span>).start()
</code></pre>
</li>
<li>
<p>因为 Swift 闭包不支持默认参数, 所以在第二步调用的时候必须传入所有参数, 哪怕是传入 nil, 这个也是比较蛋疼的一个事情</p>
</li>
</ol>
<h2 id="v21"><a class="markdownIt-Anchor" href="#v21"></a> V2.1</h2>
<p>理想的情况是将柯里化的第二部分再变成一个函数调用而不是闭包, 这样就可以使用链式调用而且可以使用默认参数</p>
<p>那就需要在调用 fadeOut 的时候先存下来动画闭包, 然后再继续初始化, 于是添加一个静态闭包属性, 修改 extension 如下:</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>{
  <span class="keyword">let</span> view: <span class="type">UIView</span>
  <span class="keyword">let</span> duration: <span class="type">TimeInterval</span>
  <span class="keyword">var</span> timingFunction: <span class="type">UIViewAnimationOptions</span> = []
  <span class="keyword">let</span> animation: <span class="type">AnimationBlock</span>
  <span class="keyword">var</span> completion: <span class="type">CompletionBlock</span>?
  
  <span class="keyword">init</span>(<span class="number">_</span> view: <span class="type">UIView</span>, duration: <span class="type">TimeInterval</span>, timingFunction: <span class="type">UIViewAnimationOptions</span> = [], animation: @escaping <span class="type">AnimationBlock</span>, completion: <span class="type">CompletionBlock</span>? = <span class="literal">nil</span>) {
    <span class="keyword">self</span>.view = view
    <span class="keyword">self</span>.duration = duration
    <span class="keyword">self</span>.timingFunction = timingFunction
    <span class="keyword">self</span>.animation = animation
    <span class="keyword">self</span>.completion = completion
  }
  
  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> {
    <span class="type">UIView</span>.animate(withDuration: duration, delay: <span class="number">0</span>, options: timingFunction, animations: {
      <span class="keyword">self</span>.animation(<span class="keyword">self</span>.view)
    }, completion: completion)
  }
  
  <span class="comment">// 添加了一个 static property 来保存 animation block</span>
  fileprivate <span class="keyword">static</span> <span class="keyword">var</span> staticAnimation: <span class="type">AnimationBlock</span>?
}

<span class="class"><span class="keyword">extension</span> <span class="title">Animation</span> </span>{
  <span class="comment">// 静态创建方法</span>
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">staticGenerator</span><span class="params">(with view: UIView, duration: TimeInterval, timingFunction: UIViewAnimationOptions = [], completion: CompletionBlock? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Animation</span> {
    <span class="keyword">return</span> <span class="type">Animation</span>(view, duration: duration, timingFunction: timingFunction, animation: <span class="type">Animation</span>.staticAnimation!, completion: completion)
  }
  
  <span class="comment">// 保存 animation block</span>
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fadeOut</span><span class="params">()</span></span> -&gt; <span class="type">Animation</span>.<span class="type">Type</span> {
    staticAnimation = { $<span class="number">0</span>.alpha = <span class="number">0</span> }
    <span class="keyword">return</span> <span class="type">Animation</span>.<span class="keyword">self</span>
  }
}

<span class="keyword">let</span> view = <span class="type">UIView</span>()
<span class="type">Animation</span>.fadeOut().staticGenerator(with: view, duration: <span class="number">2</span>).start()
</code></pre>
<p>经过这次的修改, 将动画的初始化方法变成了分段的过程, 不同的动画只是初始化了不同的闭包, 然后继续调用静态的初始化方法来创建 <code>Animation</code></p>
<p>本来很满意地看着现在的代码, 结果 review 后又被教做人, 就是使用 staticAnimation 来保存 AnimationBlock 的话是线程不安全的, 而又没有任何的必要去加互斥量或者锁, 又陷入了很僵的境地</p>
<h2 id="v30"><a class="markdownIt-Anchor" href="#v30"></a> V3.0</h2>
<p>这时同事提出了一个方案</p>
<blockquote>
<p>既然想写成链式调用那就把所有参数都写成链式的</p>
</blockquote>
<p>(瞬间感到差距所在</p>
<p>最后改成了这样:</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>{
  <span class="comment">// 将所有参数都变成 option 或者默认值</span>
  <span class="keyword">var</span> view: <span class="type">UIView</span>? = <span class="literal">nil</span>
  <span class="keyword">var</span> duration: <span class="type">TimeInterval</span> = <span class="number">0</span>
  <span class="keyword">var</span> timingFunction: <span class="type">UIViewAnimationOptions</span> = []
  <span class="keyword">let</span> animation: <span class="type">AnimationBlock</span>
  <span class="keyword">var</span> completion: <span class="type">CompletionBlock</span>?
  
  <span class="keyword">init</span>(animation: @escaping <span class="type">AnimationBlock</span>) {
    <span class="keyword">self</span>.animation = animation
  }
  
  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> {
    <span class="comment">// 在 start 中进行参数判断, 然后正常执行动画</span>
    <span class="keyword">guard</span> <span class="keyword">let</span> view = view, duration &gt; <span class="number">0</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="type">UIView</span>.animate(withDuration: duration, delay: <span class="number">0</span>, options: timingFunction, animations: {
      <span class="keyword">self</span>.animation(view)
    }, completion: completion)
  }
}

<span class="class"><span class="keyword">extension</span> <span class="title">Animation</span> </span>{
  <span class="comment">// 创建动画</span>
  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fadeOut</span><span class="params">()</span></span> -&gt; <span class="type">Animation</span> {
    <span class="keyword">return</span> <span class="type">Animation</span> { $<span class="number">0</span>.alpha = <span class="number">0</span> }
  }
  
  <span class="comment">// 一系列链式调用传参</span>
  <span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(on view: UIView)</span></span> -&gt; <span class="type">Self</span> {
    <span class="keyword">self</span>.view = view
    <span class="keyword">return</span> <span class="keyword">self</span>
  }
  
  <span class="function"><span class="keyword">func</span> <span class="title">duration</span><span class="params">(<span class="number">_</span> duration: TimeInterval)</span></span> -&gt; <span class="type">Self</span> {
    <span class="keyword">self</span>.duration = duration
    <span class="keyword">return</span> <span class="keyword">self</span>
  }
  
  <span class="function"><span class="keyword">func</span> <span class="title">completion</span><span class="params">(<span class="number">_</span> completion: @escaping CompletionBlock)</span></span> -&gt; <span class="type">Self</span> {
    <span class="keyword">self</span>.completion = completion
    <span class="keyword">return</span> <span class="keyword">self</span>
  }
}

<span class="comment">// 很舒服的使用方式</span>
<span class="keyword">let</span> view = <span class="type">UIView</span>()
<span class="type">Animation</span>.fadeOut().apply(on: view).completion { <span class="number">_</span> <span class="keyword">in</span>
  <span class="built_in">print</span>(<span class="string">"completion"</span>)
}.start()
</code></pre>
<p>在最后这个版本里, 减少了大量的代码量并且获得了很舒服的使用方式, 需要什么参数就去设置, 同时可读性也得到了很大的提高, 自认为是很好的封装了(如果有更好的想法欢迎交流</p>
<h2 id="再次跑题"><a class="markdownIt-Anchor" href="#再次跑题"></a> 再次跑题</h2>
<p>肝了半个月活动, 酒吞终于满破</p>
<p>当然最最关键的问题 <strong>非洲人的尊严</strong> 抽了将近 100 发, 从玄奘抽到师匠抽到奶光, 终于出了!</p>
<p>感觉又有了未来(￣▽￣)&quot;</p>
<p><img src="http://ouqin1qvl.bkt.clouddn.com/IMG_54356.jpg?imageslim" alt="future"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;⚠️ &lt;strong&gt;警告&lt;/strong&gt;: 本文中的代码非常恶心, 可能引起身体不适, 请谨慎阅读(当然本文的代码主要就是想恶心到人), 当然如果能够坚持看下去, 说不定会变舒服&lt;/p&gt;
&lt;p&gt;最近在公司的项目中需要将动画封装来使用, 主要需求有两个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;像 SKAction 一样支持, start, pause, resume, cancel&lt;/li&gt;
&lt;li&gt;统一 UIView 和 CALayer 的动画&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后开始进行了封装, 最后总算是写完了吧, 写的过程中向公司的同事学习了很多&lt;/p&gt;
&lt;p&gt;因此写了这篇文章, 主要想记录一下让代码从能运行到写起来和用起来都很舒服的一个过程吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf 简介及简单应用</title>
    <link href="http://yoursite.com/2017/08/14/Protobuf/"/>
    <id>http://yoursite.com/2017/08/14/Protobuf/</id>
    <published>2017-08-14T14:05:11.000Z</published>
    <updated>2017-08-15T16:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Protobuf 是 protocol buffers 的缩写. 根据<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="external">官网</a>的说法, protocol buffers 与平台无关, 与语言无关, 实现数据序列化的一种手段. 正如名字一样, protobuf 可以将数据按照规定的协议(protocol)序列化为二进制的数据(buffers). 序列化的数据基本上可以保证类型安全, 并且可以压缩大小. 这篇文章将简单说说关于 protobuf 的优点和问题, 如果有使用的需要可以作为参考</p>
<a id="more"></a>
<h2 id="安装和使用"><a class="markdownIt-Anchor" href="#安装和使用"></a> 安装和使用</h2>
<p>Protobuf 是在 github 上开源的项目, 地址在<a href="https://github.com/google/protobuf" target="_blank" rel="external">这里</a>.</p>
<p>因为 protobuf 的编译器是用 C++ 写的, 所以可以通过 C++ 的安装方式来安装. mac 用户的话由于没有 apt-get, 按照安装说明中要使用的命令行工具可以用 <code>homebrew</code> 安装</p>
<p>经过漫长的下载, 编译, 安装, 没有显示错误, 恭喜🎉, 可以正式开始使用 protobuf 了</p>
<p>首先按照 protobuf 的语法(格式?)来写一个 .proto 文件</p>
<pre class="highlight"><code class="protobuf"><span class="comment">// BookInfo.proto</span>
syntax = <span class="string">"proto3"</span>;

<span class="class"><span class="keyword">message</span> <span class="title">BookInfo</span> </span>{
  <span class="built_in">int64</span> id = <span class="number">1</span>;
  <span class="built_in">string</span> title = <span class="number">2</span>;
  <span class="built_in">string</span> author = <span class="number">3</span>;
}
</code></pre>
<p>因为 protobuf 与语言无关, 因此接下来请按照 github 项目页面的教程选择自己使用的语言, 现在 protobuf 官方支持的语言有很多: C++, Java, Python, Objective-C… 选择后根据文档中的方法编译 .proto 文件, 这里我们将 .proto 编译成能够当做 CommonJS 引入的 js 文件</p>
<pre class="highlight"><code class="shell">$ protoc --js_out=import_style=commonjs,binary:. BookInfo.proto
</code></pre>
<p>其实利用 protobuf 编译器将 .proto 文件编译成各种语言的方法都大同小异:</p>
<ol>
<li>指定语言的输出路径 <code>--js-out=.</code> (这里省略了中间的编译选项)</li>
<li>要编译的文件 <code>BookInfo.proto</code></li>
</ol>
<p>然后就能看到当前文件夹中出现了一个 <code>BookInfo_pb.js</code> 的文件, 在项目中引用后就可以直接使用了</p>
<pre class="highlight"><code class="javascript"><span class="keyword">const</span> BookInfoModel = <span class="built_in">require</span>(<span class="string">'../protobuf_model/build_model/BookInfo_pb'</span>)
<span class="keyword">let</span> bookInfo = <span class="keyword">new</span> BookInfoModel.BookInfo()
bookInfo.setId(<span class="number">4</span>)
</code></pre>
<p>安装及使用大体就是这样, 根据语言的不同会有一些差别. 接下来将会开始介绍隐藏在 .proto 和 _pb.js 文件背后的东西</p>
<h2 id="先从-json-说起"><a class="markdownIt-Anchor" href="#先从-json-说起"></a> 先从 JSON 说起</h2>
<p>在讲 protobuf 之前先聊聊 JSON, 这个现在非常流行的数据格式. JSON 的格式非常简洁并且可以自解释, 在传输同样的数据量的时候比 XML 更小, 这也就意味着 JSON 可以占用更小的内存, 有更快的传输速度, 后面这点更为关键. 作为服务器和客户端的交互数据, 传输速度更快可以让用户更快得到反馈, 极大提高用户体验.</p>
<p>JSON 是利用符号来作为数据结构的分界, 比如 <code>[]</code> 表示数组, <code>{}</code> 表示字典, 这样就可以直接传输 key-value, 基本上传输的都是最简的需要的数据, 这是它如此轻量的原因. 那么, 有没有办法让 JSON 在传输数据的时候体积更小呢?</p>
<pre class="highlight"><code class="JSON">// <span class="number">47</span> 个字符
{
  <span class="attr">"id"</span>: <span class="number">123456</span>,
  <span class="attr">"title"</span>: <span class="string">"A Book"</span>,
  <span class="attr">"author"</span>: <span class="string">"bewils"</span>
}
</code></pre>
<p>因为 JSON 的格式不能改变, 否则在解析过程中会直接 crash 掉, 而 value 部分因为都是需要的数据也不能动, 所以理所当然地想到可以对 key 做一些事情</p>
<pre class="highlight"><code class="JSON">// <span class="number">37</span> 个字符
{
  <span class="attr">"a"</span>: <span class="number">123456</span>,
  <span class="attr">"b"</span>: <span class="string">"A Book"</span>,
  <span class="attr">"c"</span>: <span class="string">"bewils"</span>
}
</code></pre>
<p>通过一个简单的操作就可以将传输的数据压缩 21%, 虽然在使用的时候就会有点麻烦 ???</p>
<pre class="highlight"><code class="Javascript"><span class="keyword">let</span> id = obj[<span class="string">"a"</span>]
<span class="keyword">let</span> title = obj[<span class="string">"b"</span>]
</code></pre>
<p>可读性基本为 0, 除了写代码的人没人能看得懂, 估计写代码的人过了 3 个月也不知道自己写了什么鬼东西ヽ(｀Д´)ﾉ</p>
<p>那要不用个字典来存储对应关系? 然后就能写出可读性好的代码了</p>
<pre class="highlight"><code class="Javascript"><span class="keyword">const</span> keys = {
  <span class="attr">id</span>: <span class="string">"a"</span>,
  <span class="attr">title</span>: <span class="string">"b"</span>,
  <span class="attr">author</span>: <span class="string">"c"</span>
}

<span class="keyword">let</span> id = obj[keys[<span class="string">"id"</span>]]
<span class="keyword">let</span> author = obj[keys[<span class="string">"author"</span>]]
</code></pre>
<p>通过这种方法, 在前后端各保留一份对应字典, 就可以在传输的过程中缩小体积节省时间, 并且在使用时不会造成困扰. 但是, 等等, keys 的结构好像看起来和 .proto 文件的结构有点像啊? 好像发现了什么不得了的事情.</p>
<p><img src="http://ouqin1qvl.bkt.clouddn.com/IMG_0129.PNG?imageslim" alt="Protocol Buffers"></p>
<h2 id="proto-文件和编码"><a class="markdownIt-Anchor" href="#proto-文件和编码"></a> .proto 文件和编码</h2>
<p>实际上 .proto 文件就是一个数据格式的协议文件, 里面规定了数据的结构和类型. 比如开始的 BookInfo,  <code>int64 id = 1</code> 这句就是定义了 BookInfo 的属性名为 id, 类型为 int64, tag 为 1. 这样传输的时候只需要传数据, 类型和 tag, 收到后按照 tag 对应的属性名将数据序列化为对象就可以正常使用了</p>
<p>关于编码方法, <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="external">官网</a>写了很详细的介绍, 在这里简单介绍(翻译)下:</p>
<pre class="highlight"><code class="protobuf"><span class="class"><span class="keyword">message</span> <span class="title">Test1</span> </span>{
  <span class="keyword">required</span> <span class="built_in">int32</span> a = <span class="number">1</span>;
}

<span class="class"><span class="keyword">message</span> <span class="title">Test2</span> </span>{
  <span class="keyword">required</span> <span class="built_in">string</span> b = <span class="number">2</span>;
}
</code></pre>
<p>使用编译好的文件来创建 Test1 和 Test2 对象, 将 a 和 b 分别设为 150 和 “testing”, serialize 后打印 buffer 可以看到分别输出了 16 进制的 <code>08 96 01</code> 和 <code>12 07 74 65 73 74 69 6e 67</code>, 这就是 protobuf 将数据编码后的结果</p>
<p>首先看两个数据的前 8 位分别是<code>08(0000 1000)</code> 和 <code>12(0001 0010)</code>, protobuf 的编码规则是低 3 位存 type, 高 5 位存 tag. a 字段的类型 int32 是 Varint(type 0), tag 为 1, 因此拼起来是 <code>00001(tag) 000(type)</code> 即 08; b 字段同理拼起来为 <code>00010(tag) 002(type)</code> 即 12</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Meaning</th>
<th>Used For</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Varint</td>
<td>int32, int64, uint32, uint64, sint32, sint64, bool, enum</td>
</tr>
<tr>
<td>1</td>
<td>64-bit</td>
<td>fixed64, sfixed64, double</td>
</tr>
<tr>
<td>2</td>
<td>Length-delimited</td>
<td>string, bytes, embedded messages, packed repeated fields</td>
</tr>
<tr>
<td>3</td>
<td>Start group</td>
<td>groups (deprecated)</td>
</tr>
<tr>
<td>4</td>
<td>End group</td>
<td>groups (deprecated)</td>
</tr>
<tr>
<td>5</td>
<td>32-bit</td>
<td>fixed32, sfixed32, float</td>
</tr>
</tbody>
</table>
<p>因为 protobuf 不使用符号来截断数据, 因此就存在如何分割数据的问题, 在传输数字的时候 protobuf 将每字节的第 1 位用来表示是否结束, 剩下 7 位为数据位. 而且字节间是倒序编码但字节内的 7 位是正序编码.</p>
<pre class="highlight"><code class="">96 01 = 1001 0110 0000 0001
	=&gt; 001 0110, 000 0001 (第 1 个字节的第 1 位 1 表示数据还没结束, 第 2 个字节的第 1 位 0 表示数据结束)
	=&gt; 000 0001 001 0110 (字节间顺序为倒序, 字节内顺序为正序)
	= 1001 0110 = 150
</code></pre>
<p>接下来说说 string 的编码方式, 通过第 1 个字节的 12 可知类型为 Length-delimited(string), tag 为 2, 接下来的第 2 个字节表示这段数据的长度 07, 后面的 7 个字节就是字符的 ASCII 码了</p>
<p>可以看出, protobuf 通过这些编码方式可以在保证数据类型, 数据结构的情况下还能将数据压缩到每个数据只附带 1 到 2 字节的多余数据, 更复杂结构的编码方式请前往官网查看</p>
<h2 id="protobuf-在-ios-中的使用"><a class="markdownIt-Anchor" href="#protobuf-在-ios-中的使用"></a> Protobuf 在 iOS 中的使用</h2>
<p>本来是打算在 iOS 的项目中使用 protobuf 才去学习的(因为在 Swift 中使用 protobuf 需要做额外工作所以前面用 js 举例)</p>
<p>在 iOS 中使用 protobuf 有两种方法:</p>
<ul>
<li>如果使用 Objective-C 的话, 因为 protobuf 支持编译成 objc 所以直接编译后就能使用了</li>
<li>如果使用的是 Swift 的话则有些麻烦, 不过还好苹果亲自动手写了 <a href="https://github.com/apple/swift-protobuf" target="_blank" rel="external">swift-protobuf</a> 这个库, 虽然配置麻烦但至少比较官方, 维护和反馈都比较及时</li>
</ul>
<p>swift-protobuf 的安装过程:</p>
<ol>
<li>clone 下来本地编译, 然后将编译出来的 <code>protoc-gen-swift</code> 放到 <code>PATH</code> 环境变量的目录下, 可以在命令行中输入 <code>echo $PATH</code> 来查看路径, 选一个放进去就行</li>
<li>在 xcode 项目中用 Cocoapods/Carthage/Swift Package Manager/源代码 的方式引入均可</li>
</ol>
<p>然后就可以正常使用了, swift-protobuf 提供了很多方便的方法, 除了基础的 serialize/deserialize 外还能与 JSON 相互转换, 简直方便</p>
<p>除此之外 swift-protobuf 在进行转换时还会按照 swift 的代码风格, 比如 python 的后端将 key 定义为 <code>html_url</code> 那么 swift-protobuf 会解析为驼峰命名的 <code>htmlUrl</code></p>
<p>还有一点, 因为 protobuf 是单纯的数据序列化, 因此会直接转化为 struct 而不是 class</p>
<h2 id="最后总结一下"><a class="markdownIt-Anchor" href="#最后总结一下"></a> 最后总结一下</h2>
<p>总体来说 protobuf 是一个很好的数据编码的方案</p>
<ol>
<li>可以保证类型安全</li>
<li>可以极大地压缩数据量, 理论上可以将 JSON 压缩 1~∞ 倍</li>
<li>因为 protobuf 有默认值这个说法(比如 int 的默认值是 0, stirng 的默认值是 “”, bool 的默认值是 false), 因此如果缺少数据解析过程不会失败, 而且在取值的时候不会有问题, 在 Swift 中特别明显, 所有的字段解析后都不是 optional 的, 也省去了很多 <code>if let id = id</code> 这种判断</li>
<li>在定下来 API 接口的时候后端写好 .proto 文件就可以直接编译两份直接使用, 开发过程中基本上只需要关心网络连接即可</li>
</ol>
<h2 id="还有一些问题"><a class="markdownIt-Anchor" href="#还有一些问题"></a> 还有一些问题</h2>
<p>Protobuf 在得到上述好处的同时还有一些问题</p>
<ol>
<li>分布式的不同步性. 因为需要将 .proto 文件编译后在程序中使用, 如果在分布式的系统(或者最简单的例子 客户端)中, 用户所使用的版本一般不同(客户端一般不会强制更新). 如果新的版本中 .proto 文件进行了修改, 虽然 protobuf 的解析过程不会出现问题(多余字段忽略, 缺失字段用默认值), 但在使用的过程中还是会有一定的影响</li>
<li>不推荐删除字段, 和第 1 点一样的原因, 而且如果这个字段真的没用过要删除的话新的字段也不能使用该字段的  tag 因为 protobuf 在解析的时候是用 tag 和字段名对应的, 客户端拿到了 tag 还是会对应到旧的字段上</li>
<li>Protobuf 2 中的 required 和 optional 这两个用来标记字段的关键字在 3 中取消了, 理由同 1, 2 因此使用 Protobuf 来保证字段缺失问题只能回去用 2 的版本</li>
<li><code>Swift</code> 写客户端(其实什么语言都是一样): 因为有默认值的存在所以对于 0, false 等值的用法就要小心, 因为无法保证接收到的到底是确实是这个数据还是丢失了字段</li>
<li>关于在 Swift 中的使用还有一个理由可以看我的另外一篇<a href="http://blog.bewils.cn/2017/08/07/Swift4codable/" target="_blank" rel="external">Swift4 JSON 解析</a></li>
<li><code>Javascript</code> 写前端: 前端因为请求 js 脚本到本地执行所以不存在不同步的问题, 但是为了传 protobuf 还要把解析文件一起传还是很蛋疼的. 而且 JSON 本来就是 Javascript 的内置对象, 操作方便到天际, 根本没可比性</li>
</ol>
<h2 id="目前想到的最好使用场合"><a class="markdownIt-Anchor" href="#目前想到的最好使用场合"></a> 目前想到的最好使用场合</h2>
<p>网络游戏开发(强制客户端更新, 大量数据, 对传输速度要求高)</p>
<h2 id="安利一波"><a class="markdownIt-Anchor" href="#安利一波"></a> 安利一波</h2>
<p>黑仪·约会甜到炸/荡漾真可爱/疯狂打 call/٩(<sup>o</sup>)۶</p>
<p><img src="http://ouqin1qvl.bkt.clouddn.com/IMG_3941.png?imageslim" alt="Hitagi"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Protobuf 是 protocol buffers 的缩写. 根据&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;官网&lt;/a&gt;的说法, protocol buffers 与平台无关, 与语言无关, 实现数据序列化的一种手段. 正如名字一样, protobuf 可以将数据按照规定的协议(protocol)序列化为二进制的数据(buffers). 序列化的数据基本上可以保证类型安全, 并且可以压缩大小. 这篇文章将简单说说关于 protobuf 的优点和问题, 如果有使用的需要可以作为参考&lt;/p&gt;
    
    </summary>
    
    
      <category term="Basic" scheme="http://yoursite.com/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Swift4 JSON 解析</title>
    <link href="http://yoursite.com/2017/08/07/Swift4codable/"/>
    <id>http://yoursite.com/2017/08/07/Swift4codable/</id>
    <published>2017-08-07T14:05:52.000Z</published>
    <updated>2017-08-24T14:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 的 JSON 解析一直是一件很麻烦的事, 在 Swift3 中请求一个数据后可能要进行如下操作(比如服务器返回一个数组):</p>
<pre class="highlight"><code class="swift"><span class="keyword">if</span> <span class="keyword">let</span> jsonObject = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .allowFragments) {
  <span class="keyword">if</span> <span class="keyword">let</span> objectList = jsonObject <span class="keyword">as</span>? [<span class="type">Any</span>] {
    <span class="keyword">for</span> object <span class="keyword">in</span> objectList {
      <span class="keyword">if</span> <span class="keyword">let</span> object = object <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] {
        <span class="comment">// use object</span>
      }
    }
  }
}
</code></pre>
<a id="more"></a>
<p>经过千辛万苦终于拿到了这个 object , 然而噩梦才刚刚开始</p>
<p>转成 <code>[String: Any]</code> 的 object 基本上没法用, 很多时候我们还需要去拿每个 key 和 value 再赋给我们自己定义好的 struct / class (又是一长串的 <code>if let as</code>)</p>
<p>当然, 目前解决这个问题还是有一些办法的, 比如可以去尝试使用 <a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="external">SwiftyJSON</a> 直接当原生的 Array / Dictionary 用, 或者更高级的 <a href="https://github.com/thoughtbot/Argo" target="_blank" rel="external">Argo</a>, 直接将 JSON data 映射到自己定义的 struct</p>
<p>在 Swift4 中, Swift Standard Library 带来的新的类和协议支持原生的 JSON 解析. 甚至不只是 JSON, 只要是 encoding / decoding 的转化都可以支持(比如 plist)</p>
<h2 id="关于-swift4-codable"><a class="markdownIt-Anchor" href="#关于-swift4-codable"></a> 关于 Swift4 Codable</h2>
<p>在 Swfit4 中新添加了一个复合协议  <code>typealias Codable = Decodable &amp; Encodable</code>, 想进行 encoding / decoding 只要实现这个协议即可. 而且根据需要, 如果只是从服务器取数据或只是向服务器发数据完全可以只实现其中一个, 接下来先来试验下 Decodable 协议. 先找一个 API, 就随便找了一个项目直接用 github 的 API <a href="https://api.github.com/repos/bewils/IWantTheGreenOne" target="_blank" rel="external">https://api.github.com/repos/bewils/IWantTheGreenOne</a>. 首先可以看看返回的数据结构: 因为只取了一个 repository 所以可以看到返回的结构也很简单, 按照这个结构写出如下 struct</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">struct</span> <span class="title">Repo</span>: <span class="title">Decodable</span> </span>{
  <span class="keyword">var</span> `<span class="keyword">private</span>`: <span class="type">Bool</span>
  <span class="keyword">var</span> html_url: <span class="type">String</span>
  <span class="keyword">var</span> description: <span class="type">String</span>?
}
</code></pre>
<p>这里只取了其中的三个属性, 即只解析返回的 data 的这三个字段, 然后尝试发送请求并解析返回的数据</p>
<pre class="highlight"><code class="swift"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://api.github.com/repos/bewils/IWantTheGreenOne"</span>) {
  <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: .<span class="keyword">default</span>)
  session.dataTask(with: url) { (data, <span class="number">_</span>, err) <span class="keyword">in</span>
    <span class="keyword">guard</span> err == <span class="literal">nil</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> { <span class="keyword">return</span> }
    <span class="keyword">if</span> <span class="keyword">let</span> repo = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().decode(<span class="type">Repo</span>.<span class="keyword">self</span>, from: data) {
      <span class="built_in">print</span>(repo)
    } <span class="keyword">else</span> {
      <span class="built_in">print</span>(<span class="string">"JSON parse failed"</span>)
    }
  }.resume()
}
</code></pre>
<p>奇迹出现了, 很快控制台里就输出了 <code>Repo(private: false, html_url: &quot;https://github.com/bewils/IWantTheGreenOne&quot;, description: Optional(&quot;SpriteKit Game&quot;))</code> 这样的文字. 我们几乎没做什么事, 一如既往的网络请求, 在回调函数中利用同样是 Swift4 中新加入的 JSONDecoder 类来按照 Repo 的模型解析 data, 然后就成功的输出了解析结果</p>
<p>Codable 便利的一点还在于 Swift 中给出了这个协议的默认实现, 就像 Repo 直接遵从 Decodable 没有写解析的任何方法就能通过 JSONDecoder 解析出来</p>
<p>同时在声明 Repo 时我们将 description 声明成了 String? 的类型, 这样如果返回的数据里没有这个字段只会解析出 nil 而不会报错</p>
<h2 id="关于字段名"><a class="markdownIt-Anchor" href="#关于字段名"></a> 关于字段名</h2>
<p>第一个字段 <code>private</code> 是 Swift 的关键字, 当做变量名的时候只能用 `` 包起来, 那要不换个名字改成 <code>jurisdiction</code>. 运行, 好的, 报错: <strong>没有 jurisdicition 这个字段</strong></p>
<p>这只是一种情况, 还有比如返回的 JSON 的 key 是用 _ 分割的命名, 而 Swift 的代码风格一般是驼峰命名, 这时就会有字段名不对应的问题, 为了解决这个问题, 可以在 Repo 的内部声明一个遵从 CodingKey 的叫 CodingKeys 枚举值</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">struct</span> <span class="title">Repo</span>: <span class="title">Decodable</span> </span>{
  <span class="keyword">var</span> jurisdiction: <span class="type">Bool</span>
  <span class="keyword">var</span> htmlUrl: <span class="type">String</span>
  <span class="keyword">var</span> description: <span class="type">String</span>?
  
  <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>{
    <span class="keyword">case</span> jurisdiction = <span class="string">"private"</span>
    <span class="keyword">case</span> htmlUrl = <span class="string">"html_url"</span>
    <span class="keyword">case</span> description
  }
}
</code></pre>
<p>重新运行, 又一次成功地解析出了 Repo: <code>Repo(jurisdiction: false, htmlUrl: &quot;https://github.com/bewils/IWantTheGreenOne&quot;, description: Optional(&quot;SpriteKit Game&quot;))</code>.</p>
<p>通过使用 CodingKey 的方式重新定义 JSON key 和属性名的对应关系是很好用的, 但这里还有一个小问题, 就是如果使用 CodingKey 就必须吧所有的属性和 key 都写进去, 比如 Repo 中虽然 description 不需要转化还是要写进去, 否则这次会找不到 description 对应的 key (如果有 50 个属性的对象为了一个属性而使用 CodingKeys 也是很惨的…)</p>
<h2 id="关于嵌套结构"><a class="markdownIt-Anchor" href="#关于嵌套结构"></a> 关于嵌套结构</h2>
<p>可以看到从 API 返回的数据虽然是基本的 Dictionary 结构, 但里面还是有一个 <code>owner</code> 的字段属于嵌套的结构, Swift4 中解析嵌套结构的方法非常简单: 也直接嵌套一个就可以了</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">struct</span> <span class="title">Owner</span>: <span class="title">Decodable</span> </span>{
  <span class="keyword">var</span> login: <span class="type">String</span>
  <span class="keyword">var</span> id: <span class="type">Int</span>
  <span class="keyword">var</span> avatar_url: <span class="type">String</span>
}

<span class="class"><span class="keyword">struct</span> <span class="title">Repo</span>: <span class="title">Decodable</span> </span>{
  <span class="keyword">var</span> jurisdiction: <span class="type">Bool</span>
  <span class="keyword">var</span> htmlUrl: <span class="type">String</span>
  <span class="keyword">var</span> description: <span class="type">String</span>?
  <span class="keyword">var</span> owner: <span class="type">Owner</span>
  
  <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>{
    <span class="keyword">case</span> jurisdiction = <span class="string">"private"</span>
    <span class="keyword">case</span> htmlUrl = <span class="string">"html_url"</span>
    <span class="keyword">case</span> description
    <span class="keyword">case</span> owner
  }
}
</code></pre>
<p>新添加了一个 Owner 的 struct, 然后加到 Repo 中并且添加一个 CodingKey</p>
<p>运行, 输出: <code>Repo(jurisdiction: false, htmlUrl: &quot;https://github.com/bewils/IWantTheGreenOne&quot;, description: Optional(&quot;SpriteKit Game&quot;), owner: __lldb_expr_36.Owner(login: &quot;bewils&quot;, id: 16081099, avatar_url: &quot;https://avatars3.githubusercontent.com/u/16081099?v=4&quot;))</code></p>
<p>(简直完美, 此处应有掌声 👏</p>
<h2 id="关于数组"><a class="markdownIt-Anchor" href="#关于数组"></a> 关于数组</h2>
<p>通过上面的过程已经可以将 Repo 成功解析出来了, 无论多复杂的 JSON, 只要是 key-value, 无论嵌套多深都是一样的写法</p>
<p>然而如果返回的是一个数组呢? <a href="https://api.github.com/users/bewils/repos" target="_blank" rel="external">https://api.github.com/users/bewils/repos</a></p>
<p>关于数组的解析将会分为两部分: 二逼程序员和文艺程序员</p>
<h3 id="二逼程序员"><a class="markdownIt-Anchor" href="#二逼程序员"></a> 二逼程序员</h3>
<p>再声明一个 stuct</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">struct</span> <span class="title">UserRepos</span> </span>{
  <span class="keyword">var</span> repoList: [<span class="type">Repo</span>]
}
</code></pre>
<p>因为返回的是一个数组, 没有 key 所以通过默认方法肯定转换不来, 自定义去实现 Decodable</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">extension</span> <span class="title">UserRepos</span>: <span class="title">Decodable</span> </span>{
  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    repoList = []
    
    <span class="keyword">var</span> values = <span class="keyword">try</span> decoder.unkeyedContainer()
    <span class="keyword">while</span> !values.isAtEnd {
      <span class="keyword">let</span> repo = <span class="keyword">try</span> values.decode(<span class="type">Repo</span>.<span class="keyword">self</span>)
      repoList.append(repo)
    }
  }
}
</code></pre>
<p>自定义实现的过程中首先通过 decoder 取出 unkeyedContainer 即初步解析为数组型的结构, 如果这时输出的话可以看到 values 就是我们要的数组, 然后顺手开始 <code>for in</code>, values 的类型是 <code>UnkeyedDecodingContainer</code>, 但竟然不遵从 <code>Sequence</code> 协议…没办法遍历这可是个难题, 而且查看 values 的其他属性 <code>isAtEnd = false, count = 31</code> 也证明了 values 应该是可以遍历的</p>
<p>最后发现 <code>UnkeyedDecodingContainer</code> 的遍历方法就像一个队列, 每次调用 decode 就出一个, 然后通过 <code>isAtEnd</code> 来终止循环就可以了</p>
<pre class="highlight"><code class="swift"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://api.github.com/users/bewils/repos"</span>) {
  <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: .<span class="keyword">default</span>)
  session.dataTask(with: url, completionHandler: { (data, <span class="number">_</span>, err) <span class="keyword">in</span>
    <span class="keyword">guard</span> err == <span class="literal">nil</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> { <span class="keyword">return</span> }
    <span class="keyword">do</span> {
      <span class="comment">// 二逼程序员解析法</span>
      <span class="keyword">let</span> repos = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">UserRepos</span>.<span class="keyword">self</span>, from: data)
      <span class="built_in">print</span>(repos.repoList)
    } <span class="keyword">catch</span> <span class="keyword">let</span> err {
      <span class="built_in">print</span>(err)
    }
  }).resume()
}
</code></pre>
<p>这样就通过自定义实现 Decodable 成功地解析出了返回的数组</p>
<h3 id="文艺程序员"><a class="markdownIt-Anchor" href="#文艺程序员"></a> 文艺程序员</h3>
<p>文艺程序员的解析方法呢?</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> repos = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Repo</span>].<span class="keyword">self</span>, from: data)
</code></pre>
<h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2>
<p>Swift4 中提供的 Codable 使得解析 JSON 变的极其方便, 这篇文章中主要讨论了 Decodable, 关于 Encodable 基本上就是 Decodable 的反向操作, 就不在这里讨论了</p>
<p>本文的 demo 代码放在如下地址 <a href="https://github.com/bewils/SwiftCodable" target="_blank" rel="external">SwiftCodable</a></p>
<h2 id="另"><a class="markdownIt-Anchor" href="#另"></a> 另</h2>
<p>活动马上就要过去了, 还是没有抽到师匠, 气 （｀へ´）</p>
<blockquote>
<p>P 站</p>
<p>Lpip(6996493) -「スカサハ」(59639555)</p>
</blockquote>
<p><img src="/images/Swift4Codable/IMG_3923.png" alt="スカサハ"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 的 JSON 解析一直是一件很麻烦的事, 在 Swift3 中请求一个数据后可能要进行如下操作(比如服务器返回一个数组):&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;swift&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jsonObject = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data!, options: .allowFragments) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; objectList = jsonObject &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; objectList {
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; object = object &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] {
        &lt;span class=&quot;comment&quot;&gt;// use object&lt;/span&gt;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS11 大标题</title>
    <link href="http://yoursite.com/2017/06/12/BigTitle/"/>
    <id>http://yoursite.com/2017/06/12/BigTitle/</id>
    <published>2017-06-12T15:29:11.000Z</published>
    <updated>2017-06-12T17:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS11 中苹果推出了新的设计风格 Complexion Reduction，其中一个很直观的特点就是大标题的使用：</p>
<a id="more"></a>
<p><img src="/images/BigTitle/Snip20170612_11.png" alt="Snip20170612_11"></p>
<p>在过去的 iOS 版本中很多 App 就采用了这种设计方式，但由于 iOS 没有提供相关的方法，只能通过开发者自行实现。而在 iOS11 中，iOS 提供了统一的实现方法即 Large Title，我们可以很轻松地实现上述效果</p>
<h2 id="1-相关属性"><a class="markdownIt-Anchor" href="#1-相关属性"></a> 1 相关属性</h2>
<p>iOS11 中实现大标题非常简单，只需要设置两个属性即可：</p>
<pre class="highlight"><code class="swift"><span class="comment">// UINavigationBar</span>
<span class="keyword">var</span> prefersLargeTitles: <span class="type">Bool</span>

<span class="comment">// UINavigationItem</span>
<span class="keyword">var</span> largeTitleDisplayMode: <span class="type">UINavigationItem</span>.<span class="type">LargeTitleDisplayMode</span>
</code></pre>
<p>largeTitleDisplayMode 的取值为一个枚举值，取值如下：</p>
<pre class="highlight"><code class="swift"><span class="keyword">case</span> always
<span class="keyword">case</span> automatic
<span class="keyword">case</span> never
</code></pre>
<p>当设置 <code>prefersLargeTitles = true</code> 且 <code>largeTitleDisplayMode = .automatic</code> 就会有如下图所示的效果，默认显示大标题，而当屏幕向上滑动的时候标题缩小恢复到过去的小标题样式</p>
<p><img src="/images/BigTitle/Snip20170612_12.png" alt="Snip20170612_12"></p>
<p>顺便还有个好消息，这么简单的两个属性当然已经集成在 storyboard 中了！</p>
<p><img src="/images/BigTitle/Snip20170612_15.png" alt="Snip20170612_15"></p>
<h2 id="2-集成搜索框"><a class="markdownIt-Anchor" href="#2-集成搜索框"></a> 2 集成搜索框</h2>
<p>iOS8 中为 UITableView 内嵌了搜索框 UISearchController，但加到 UITableView 中的搜索框与大标题配合的时候就很复杂，需要两个组件间通信状态并同步动画。因此 iOS11 中选择将搜索框加入到 UINavigationItem 中，这样就实现了统一的动画。</p>
<p>而加入搜索框的方法也很简单，UINagivationItem 中新添加了两个属性：</p>
<pre class="highlight"><code class="swift"><span class="keyword">var</span> searchController: <span class="type">UISearchController</span>?
<span class="keyword">var</span> hidesSearchBarWhenScrolling: <span class="type">Bool</span>

<span class="comment">// 使用</span>
<span class="keyword">self</span>.navigationItem.searchController = <span class="type">UISearchController</span>(searchResultsController: <span class="literal">nil</span>)
<span class="keyword">self</span>.navigationItem.hidesSearchBarWhenScrolling = <span class="literal">true</span>
</code></pre>
<p>其中 <code>hideSearchBarWhenScrolling</code> 属性可以设置下面试图滚动的时候时候隐藏搜索框， <code>true</code> 和 <code>false</code> 时效果分别如下：</p>
<p><img src="/images/BigTitle/Snip20170613_18.png" alt="Snip20170613_18"></p>
<h2 id="3-视图栈中的使用"><a class="markdownIt-Anchor" href="#3-视图栈中的使用"></a> 3 视图栈中的使用</h2>
<p>iOS11 中的大标题，比如在设置中的使用，只在主界面中用了大标题，即 <code>UINavigationController</code> 的 <code>rootViewController</code> 中。当点击某个设置进入下级视图的时候直接是以小标题的样式展示</p>
<p>借助 iOS11 中方便的 API，我们只需要在后面的视图中设置 <code>largeTitleDisplayMode = .never</code> 即可</p>
<p><img src="/images/BigTitle/demo.gif" alt="demo"></p>
<h2 id="4-参考资料"><a class="markdownIt-Anchor" href="#4-参考资料"></a> 4 参考资料</h2>
<p><a href="https://developer.apple.com/videos/play/wwdc2017/201/" target="_blank" rel="external">https://developer.apple.com/videos/play/wwdc2017/201/</a> What’s new in cocoa touch</p>
<p><a href="https://developer.apple.com/documentation/uikit/uinavigationbar" target="_blank" rel="external">https://developer.apple.com/documentation/uikit/uinavigationbar</a> UINavigationBar 的改动</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS11 中苹果推出了新的设计风格 Complexion Reduction，其中一个很直观的特点就是大标题的使用：&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s new in swift4</title>
    <link href="http://yoursite.com/2017/06/09/Swift4/"/>
    <id>http://yoursite.com/2017/06/09/Swift4/</id>
    <published>2017-06-09T06:55:03.000Z</published>
    <updated>2017-08-24T14:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这次 WWDC 最令你激动的更新是什么？</p>
<p>最令我激动的是 swift 没更新</p>
</blockquote>
<p>然而并不是这样，只不过 keynote 中偏重新品发布没提到就以为没有更新了？Github 上 swift 的更新进程仍在继续，新添加的特性和修复的 bug 也不断增多。Swift 作为一门现代语言正向着更好的方向发展，在这篇文章中将主要讨论 swift4 中主要的变化</p>
<a id="more"></a>
<h2 id="0-不是一门新的语言"><a class="markdownIt-Anchor" href="#0-不是一门新的语言"></a> 0 不是一门新的语言</h2>
<p>这大概是今年最大的惊喜吧，4 终于作为了一个版本号而不是新语言的名称出现在 swift 中，每年为人们所诟病的 swift 重新入门也终于可以停下来了。虽然 4 和 3 还是有一定的区别但是已经基本上可以共同编译，官方也说 swift3 的绝大多数代码不需要移植就能通过编译，这样很多第三方的库即使停止维护或者维护不及时现在也可以继续运行</p>
<h2 id="1-单向区间"><a class="markdownIt-Anchor" href="#1-单向区间"></a> 1 单向区间</h2>
<p>单向区间是一个新的类型，主要分两种：确定上限和确定下限的区间。直接用字面量定义大概可以写成 <code>...6</code> 和 <code>2...</code></p>
<p>单向区间比较方便的场合</p>
<ol>
<li>
<p>在比如 zip 函数中使用单向区间，因为 zip 过程中较短的一个序列结束后整个操作就会停止，因此使用单向区间可以不去关心限制(反正范围比你大</p>
<pre class="highlight"><code class="swift"><span class="comment">// [(1, "q"), (2, "w"), (3, "e")]</span>
<span class="type">Array</span>(<span class="built_in">zip</span>(<span class="number">1</span>..., [<span class="string">"q"</span>, <span class="string">"w"</span>, <span class="string">"e"</span>]))
</code></pre>
</li>
<li>
<p>比如对数组进行操作，取第 3 个元素后的所有元素，现在可以直接通过 <code>arr[3...]</code> 直接取出同样不用关心数组的长度</p>
</li>
<li>
<p>可以用在 switch 语句中，实际上这样 switch 语句就可以模拟整个数轴了</p>
</li>
</ol>
<h2 id="2-private-权限"><a class="markdownIt-Anchor" href="#2-private-权限"></a> 2 private 权限</h2>
<p>在开始学习面向对象的时候每个人都学过封装，通过隐藏内部实现或属性暴露接口给其他类使用。同时也会学到一个重要的关键字 private，这个关键字可以将一切类内的东西设为私有让外部无法访问，是实现封装不可缺少的关键字。</p>
<p>随着文件代码量的增加，通过自行领悟或查看教程，我们学到了在 swift 中通过扩展实现各个不同的模块功能，但这时问题就出现了</p>
<pre class="highlight"><code class="swift"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>{
  <span class="keyword">private</span> someProp
}

<span class="class"><span class="keyword">extension</span> <span class="title">SomeClass</span>: <span class="title">SomeProtocol</span> </span>{
  <span class="function"><span class="keyword">func</span> <span class="title">someFun</span><span class="params">()</span></span> {
  	<span class="comment">// error!</span>
    <span class="keyword">self</span>.someProp = newValue
  }
}
</code></pre>
<p>someProp 这个私有变量在扩展中竟然无法访问，所幸 swift3 中提供了新的关键字 fileprivate，于是我们可以继续开开心心使用这个关键字来限制变量，在其他文件中无法访问而只在本文件内能访问。</p>
<p>而 swift4 彻底修复了这个问题，由于 fileprivate 一定程度上使被限定者的作用域比预期要大(作用域从类内变成整个文件，因此修改了 private 关键字。现在，private 修饰的变量可以在类内和类的扩展中访问到了，今后对于类内的私有变量还是使用 private 即可</p>
<h2 id="3-字符串"><a class="markdownIt-Anchor" href="#3-字符串"></a> 3 字符串</h2>
<p>字符串的改动可以说是回到最初的起点？</p>
<p>由于之前过度封装，导致对字符串的操作十分麻烦，对字符串的操作总要经过一层 characters。而 swift4 中进行修改将 String 又变回我们在其他语言中看到的，通常意义上的字符的集合。现在，我们可以直接对字符串进行操作来修改获得字符串</p>
<pre class="highlight"><code class="swift"><span class="keyword">var</span> str = <span class="string">"Hello, world!"</span>
str.last
str.indexOf(<span class="string">"w"</span>)
str.<span class="built_in">dropLast</span>(<span class="number">1</span>)
</code></pre>
<p>并且字符串中还加入了一个有趣的功能，多行字符串。为了方便程序员不用在字符串中手动加入多个&quot;\n&quot;，swift4 中用 3 个 &quot; 包裹起来的字符串会自动将格式化换行和缩进</p>
<pre class="highlight"><code class="swift"><span class="comment">// 3</span>
<span class="keyword">var</span> str = <span class="string">"Hello\nWorld"</span>
<span class="comment">// 4</span>
<span class="keyword">var</span> str =<span class="string">""</span><span class="string">"
	Hello
	World
	"</span><span class="string">""</span>
</code></pre>
<h2 id="4-keypath"><a class="markdownIt-Anchor" href="#4-keypath"></a> 4 keyPath</h2>
<p>在过去用到 keyPath 的时候我们只是使用一个字符串来构建 keyPath， 比如 <code>“book.title”</code> 这种方式。在 swift4 中，keyPath 变成了一个正式的类型，而且可以通过字面量的方式进行定义，定义方法是以一个反斜线开始，比如 <code>\Book.title</code> 这种方式，也提供了 append 这种修改的方法，而就使用上来说倒是没什么太多的不同</p>
<h2 id="5-swapat"><a class="markdownIt-Anchor" href="#5-swapat"></a> 5 swapAt</h2>
<p>Swift4 中将 swapAt 封装到了 Collection 协议中，全局的 swap 函数将不合法使用会报错</p>
<pre class="highlight"><code class="swift"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]
<span class="comment">// 3</span>
<span class="built_in">swap</span>(&amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">2</span>])
<span class="comment">// 4</span>
arr.swapAt(<span class="number">1</span>, <span class="number">2</span>)
</code></pre>
<h2 id="6-类与协议复合类型"><a class="markdownIt-Anchor" href="#6-类与协议复合类型"></a> 6 类与协议复合类型</h2>
<p>过去我们指定一个变量的类型我们可以通过类名或者协议名，不过这会带来一些困扰，比如 session 中提到的</p>
<p><img src="/images/Swift4/Snip20170608_1.png" alt="Snip20170608_1"></p>
<p><img src="/images/Swift4/Snip20170608_2.png" alt="Snip20170608_2"></p>
<p>这两种写法每种都有问题，都会造成使用上的困扰，都需要进行类型转换后才能进行使用，而 swift4 中我们可以使用类 + 协议的复合类型来定义变量</p>
<p><img src="/images/Swift4/Snip20170608_3.png" alt="Snip20170608_3"></p>
<p>这样的好处是可以尽可能少得进行类型转换，也避免了单一限定会混进来其他变量的问题</p>
<h2 id="7-总结"><a class="markdownIt-Anchor" href="#7-总结"></a> 7 总结</h2>
<p>Swift4 中添加了很多新的特性，也修改了很多不方便使用的部分，总体上来说对程序员是很有帮助的一个更新，让程序员可以写出更简洁更准确的代码。由于笔者水平有限，现在只能从语言层面上来分析 swift4 的变化，如果希望了解更深层次比如编译连接的变化可以查看下面的参考资料。</p>
<h2 id="8-参考资料"><a class="markdownIt-Anchor" href="#8-参考资料"></a> 8 参考资料</h2>
<p><a href="https://developer.apple.com/videos/play/wwdc2017/102/" target="_blank" rel="external">https://developer.apple.com/videos/play/wwdc2017/102/</a> WWDC 中各个方面的概述 包括 swift4</p>
<p><a href="https://developer.apple.com/videos/play/wwdc2017/402/" target="_blank" rel="external">https://developer.apple.com/videos/play/wwdc2017/402/</a> WWDC 关于 swift4 的 session</p>
<p><a href="https://github.com/ole/whats-new-in-swift-4" target="_blank" rel="external">https://github.com/ole/whats-new-in-swift-4</a> 展示 swift4 新特性的 playground</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这次 WWDC 最令你激动的更新是什么？&lt;/p&gt;
&lt;p&gt;最令我激动的是 swift 没更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而并不是这样，只不过 keynote 中偏重新品发布没提到就以为没有更新了？Github 上 swift 的更新进程仍在继续，新添加的特性和修复的 bug 也不断增多。Swift 作为一门现代语言正向着更好的方向发展，在这篇文章中将主要讨论 swift4 中主要的变化&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>圆形扇形等一系列问题</title>
    <link href="http://yoursite.com/2017/04/07/CircleAnimation/"/>
    <id>http://yoursite.com/2017/04/07/CircleAnimation/</id>
    <published>2017-04-07T00:30:36.000Z</published>
    <updated>2017-04-07T00:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="画圆形的方法"><a class="markdownIt-Anchor" href="#画圆形的方法"></a> 画圆形的方法</h3>
<ol>
<li>
<p>UIBezierPath(ovalIn: CGRect) 给定一个矩形的范围在其中画一个内接圆</p>
</li>
<li>
<p>UIBezierPath(arcCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)</p>
</li>
</ol>
<p>参数列表为弧形中心，半径，开始角度，结束角度，方向是否为顺时针</p>
<a id="more"></a>
<p>这个函数其实是画了一个弧线，而如果把弧度起止设为 0 和 M_PI*2 那么就画出了一个圆环</p>
<p><img src="/images/CircleAnimation/Oval.png" alt=""></p>
<p>将这个 UIBezierPath 赋给 CAShapeLayer 就可以获得一个圆形的 layer ，通过设定 CAShapeLayer 的 lineWidth 为半径的 2 倍就可以绘制出一个实心圆</p>
<p><img src="/images/CircleAnimation/Group.png" alt=""></p>
<p>弧形的半径为 90 ， lineWidth 为 180，因为边框是从边界开始绘制向内 90 向外 90，因此就可以画出一个半径为 180 的圆了</p>
<h3 id="画扇形的方法"><a class="markdownIt-Anchor" href="#画扇形的方法"></a> 画扇形的方法</h3>
<p>其实画扇形也很简单，只要使用 UIBezierPath(arcCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)  先画出一个弧形，然后使用 addLine(to: CGPoint) 方法添加一条到达圆心的线， 接下来使用 close() 方法就可以画出扇形了<br>
<img src="/images/CircleAnimation/Group%202.png" alt=""></p>
<h3 id="扇形动画的方法"><a class="markdownIt-Anchor" href="#扇形动画的方法"></a> 扇形动画的方法</h3>
<p>在画圆的部分中第二种方法绘制起来非常麻烦，所以在正常情况下一般是使用 UIBezierPath(ovalIn: CGRect) 的方法来绘制圆形</p>
<p>但是第二种方法存在的价值就是绘制一个扇形动画，效果如下</p>
<p><img src="/images/CircleAnimation/1.gif" alt=""></p>
<p>因为第二种方法绘制的圆形其实是利用一个很宽很宽的边框绘制出来的，就很像传统圆的定义，半径绕着圆心旋转一周就变成了圆</p>
<p>同时CAShapeLayer中有两个属性 strokeStart 和 strokeEnd 可以设置外边框的起止位置，取值范围 0~1 。如果设置 strokeStart 为 0， strokeEnd 为 0.5 并且应用于第一个圆环，就会变成这样：</p>
<p><img src="/images/CircleAnimation/Group%203.png" alt=""></p>
<p>这时第二种方法画圆的好处就体现出来了，我们可以通过修改 strokeEnd 的值来进行一个扇形动画， 因为整个圆其实就是用 stroke 绘制出来的</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> animation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"strokeEnd"</span>)
animation.fromValue = <span class="number">0.0</span>
animation.toValue = <span class="number">1.0</span>
animation.duration = <span class="number">2.0</span>
animation.timingFunction = <span class="type">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseInEaseOut)
maskLayer.add(animation, forKey: <span class="string">"maskAnimation"</span>)
</code></pre>
<p>这样就可以绘制出一个扇形动画了</p>
<p>其实这种动画可以应用在很多方面，比如一个圆弧形的进度条，比如绘制扇形图的时候一个加载动画</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;画圆形的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#画圆形的方法&quot;&gt;&lt;/a&gt; 画圆形的方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;UIBezierPath(ovalIn: CGRect) 给定一个矩形的范围在其中画一个内接圆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UIBezierPath(arcCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参数列表为弧形中心，半径，开始角度，结束角度，方向是否为顺时针&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS AutoLayout</title>
    <link href="http://yoursite.com/2017/03/27/AutoLayout/"/>
    <id>http://yoursite.com/2017/03/27/AutoLayout/</id>
    <published>2017-03-26T16:50:49.000Z</published>
    <updated>2017-06-12T16:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始写起了 Playgroundbook，作为重度 storyboard 用户不管做什么项目都喜欢把能可视化的控件都扔到 storyboard 中，通过 storyboard 就能看到整个 App 的样式。结果 Playgroundbook 没法使用 storyboard 简直悲剧，样式看不到也就算了，布局还日常崩。用 frame 布局写得实在难受，还是正经学一下如何用代码来实现 AutoLayout</p>
<a id="more"></a>
<h2 id="nslayoutconstraint"><a class="markdownIt-Anchor" href="#nslayoutconstraint"></a> NSLayoutConstraint</h2>
<p>最基础的 AutoLayout 写法就是通过创建一个 NSLayoutConstraint 并将这个约束赋给相应的 view 来设置布局</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> constraint = <span class="type">NSLayoutConstraint</span>(item: backgroundImage, attribute: .width, relatedBy: .<span class="built_in">equal</span>, toItem: backingView, attribute: .width, multiplier: <span class="number">1</span>, constant: <span class="number">0</span>)
view.addConstraint(constraint)
</code></pre>
<p>学习这种写法只需要掌握一个公式即可（以下均为参数名请自行对照）：</p>
<blockquote>
<p>item.attribute =(&gt;=,&lt;=) toItem.attribute * multiplier + constant</p>
</blockquote>
<p>给一个 view 可以一次添加一个或多个约束</p>
<pre class="highlight"><code class="Swift">view.addConstraint(constraint)
view.addConstraints([constraint1, constraint2])
</code></pre>
<h2 id="withvisualformat"><a class="markdownIt-Anchor" href="#withvisualformat"></a> withVisualFormat</h2>
<p>iOS 中还提供了另一种无比神奇的方法来创建约束</p>
<pre class="highlight"><code class="swift"><span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="type">String</span>, options: <span class="type">NSLayoutFormatOptions</span>, metrics: [<span class="type">String</span> : <span class="type">Any</span>]?, views: [<span class="type">String</span> : <span class="type">Any</span>])
</code></pre>
<p>这种方法通过 ASCII 码绘制的可视化图形来设置约束，非常直观形象，这个方法直接返回的是一个 NSLayoutConstraint 的数组，因为通过 ASCII 图像可以同时设置多个属性约束，使用起来很方便也可以减少代码量</p>
<p>各个参数的含义：</p>
<ul>
<li>withVisualFormat：String 类型，vfl 可视化语言</li>
<li>options：枚举参数</li>
<li>metrics：在 vfl 中使用的动态参数字典</li>
<li>views：在 vfl 中使用的视图字典</li>
</ul>
<blockquote>
<p>vfl 语言：</p>
<p>|：superview</p>
<p>-：距离，view 之间为 8，与屏幕边界为 20 （通过 storyboard 默认距离就是这两个值）</p>
<p>V：垂直</p>
<p>H：水平</p>
<p>&lt;=，=，&gt;=：三种比较符</p>
<p>@：表示权值</p>
<p>[]：表示视图</p>
</blockquote>
<pre class="highlight"><code class="swift"><span class="comment">// 设置 view 的宽度与 superview 相等</span>
<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|[view]|"</span>, options: <span class="type">NSLayoutFormatOptions</span>(rawValue: <span class="number">0</span>), metrics: [:], views: [<span class="string">"view"</span>: view])
<span class="comment">/* 设置 view 的左边距 superview 为 25
* view 的右边距 superview 为 space，在 metrics 中定义为 300
*/</span>
<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|-25.0-[view]-(==space)-|"</span>, options: <span class="type">NSLayoutFormatOptions</span>(rawValue: <span class="number">0</span>), metrics: [<span class="string">"width"</span>: <span class="number">300</span>, <span class="string">"space"</span>: <span class="number">40</span>], views: [<span class="string">"view"</span>: view])
<span class="comment">/* 设置 view 和 view1 等宽
* 并且左右距 superview 为 20，两者间间距为 8
*/</span>
<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|-[view(view1)-[view1]-|"</span>, options: <span class="type">NSLayoutFormatOptions</span>(rawValue: <span class="number">0</span>), metrics: [:], views: [<span class="string">"view"</span>: view, <span class="string">"view1"</span>: view1])
<span class="comment">// 设置 view 的高度为 50</span>
<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"V:|-[view(50.0)|"</span>, options: <span class="type">NSLayoutFormatOptions</span>(rawValue: <span class="number">0</span>), metrics: [:], views: [<span class="string">"view"</span>: view])
</code></pre>
<p>vfl 中默认为 H:，因此水平约束时可以不写</p>
<h2 id="autolayout-注意事项"><a class="markdownIt-Anchor" href="#autolayout-注意事项"></a> AutoLayout 注意事项</h2>
<p>通过代码来实现 AutoLayout 时要注意几个问题：</p>
<ol>
<li>要通过约束来实现自动布局首先需要设置 <strong>translatesAutoresizingMaskIntoConstraints</strong> 为 <strong>false</strong> 否则系统会自动给视图添加一些约束可能会和我们添加的产生冲突</li>
<li>给视图添加约束前要确保该视图已经被添加到视图中即被某个 superview addSubView 过，否则因为没有加入到视图中就没办法设置约束</li>
<li>约束一般是添加到 superview 上，因为通过 superview 来管理其子视图的布局，约束直接作用于子视图会报一个 <strong>The view hierarchy is not prepared for the constraint</strong> 的错误</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始写起了 Playgroundbook，作为重度 storyboard 用户不管做什么项目都喜欢把能可视化的控件都扔到 storyboard 中，通过 storyboard 就能看到整个 App 的样式。结果 Playgroundbook 没法使用 storyboard 简直悲剧，样式看不到也就算了，布局还日常崩。用 frame 布局写得实在难受，还是正经学一下如何用代码来实现 AutoLayout&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Ife 课程笔记 @1</title>
    <link href="http://yoursite.com/2017/03/01/Ife1/"/>
    <id>http://yoursite.com/2017/03/01/Ife1/</id>
    <published>2017-03-01T02:59:53.000Z</published>
    <updated>2017-03-01T10:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始参加百度 2017 年前端技术学院，发现基础还是有点烂，记个笔记作为补充。</p>
<h2 id="emmet"><a class="markdownIt-Anchor" href="#emmet"></a> Emmet</h2>
<p>首先是开发效率上面，因为过去常年使用 koa + pug(jade) 快速搭建前后端项目，或者使用 React 这种全面的前端框架，一直没有机会去尝试 emmet 这种神奇的代码生成工具。因为 Ife 的课题都是裸写 HTML，去配置了一下 emmet 发现前端开发速度飞了起来。</p>
<a id="more"></a>
<pre class="highlight"><code class="html"><span class="comment">&lt;!-- div#foo.box --&gt;</span>
<span class="comment">&lt;!-- #为id .为class --&gt;</span>
<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>

<span class="comment">&lt;!-- a[href="#"]{Link} --&gt;</span>
<span class="comment">&lt;!-- []中填属性 {}中填文本 --&gt;</span>
<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>

<span class="comment">&lt;!-- div&gt;p+span^div --&gt;</span>
<span class="comment">&lt;!-- &gt;表示嵌套 +表示同级 ^表示回到上一级 --&gt;</span>
<span class="tag">&lt;<span class="name">div</span>&gt;</span>
  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>
  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>
<span class="tag">&lt;/<span class="name">div</span>&gt;</span>
<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>

<span class="comment">&lt;!-- ul&gt;(li&gt;a)*3 --&gt;</span>
<span class="comment">&lt;!-- ()可以形成分组 *可以重复生成 --&gt;</span>
<span class="tag">&lt;<span class="name">ul</span>&gt;</span>
  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>
  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>
  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>
<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>

<span class="comment">&lt;!-- div&gt;img.item$[src=img$.jpg]*3 --&gt;</span>
<span class="comment">&lt;!-- $可以用来占位来生成多个带属性的元素 --&gt;</span>
<span class="tag">&lt;<span class="name">div</span>&gt;</span>
  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>
  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>
  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>
<span class="tag">&lt;/<span class="name">div</span>&gt;</span>
</code></pre>
<h2 id="table"><a class="markdownIt-Anchor" href="#table"></a> Table</h2>
<p>曾经前端的布局是靠着一套 table 实现各种布局的，但是现在由于布局的方案越来越多比如 position、float、flex 均比 table 的实现效果好很多也更加灵活，现在使用 table 的场合越来越少。table 也逐渐回归了自己本来制表功能，然而表格平时也不常用所以已经快把 table 的相关属性忘得差不多了，通过这次课程复习一下 table</p>
<p><strong>cellpadding(cellspacing)</strong>：实现效果类似于给 td 设置 padding(margin)</p>
<p><strong>colspan(rowspan)</strong>：设置某个单元格横跨几行(几列)</p>
<p><strong>border-collapse</strong>：html 中默认会将 table 的border 和 cell 的 border 隔离开，中间会有一个很小的缝隙，通过修改 border-collapse 属性可以将二者合并起来，让表格看起来更紧凑。默认值为 separate，可取 collapse</p>
<h2 id="三栏布局"><a class="markdownIt-Anchor" href="#三栏布局"></a> 三栏布局</h2>
<p>有一道题目考的是很基础的三栏布局，起手写起 <code>width: calc(100% - 400px)</code>，然后发现现在借着 CSS3 的便捷传统布局有点忘记了，顺便复习下</p>
<ul>
<li>float 布局：左右浮动，中间设置 margin 为左右宽度</li>
<li>absolute 布局：左右绝对定位，中间设置 margin 为左右宽度</li>
</ul>
<p>其他方案不是很有实用价值，在此不记录，而上面两种方法就是要求左右固定宽度，中间自适应的时候其实可能会出现些显示上的问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始参加百度 2017 年前端技术学院，发现基础还是有点烂，记个笔记作为补充。&lt;/p&gt;
&lt;h2 id=&quot;emmet&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#emmet&quot;&gt;&lt;/a&gt; Emmet&lt;/h2&gt;
&lt;p&gt;首先是开发效率上面，因为过去常年使用 koa + pug(jade) 快速搭建前后端项目，或者使用 React 这种全面的前端框架，一直没有机会去尝试 emmet 这种神奇的代码生成工具。因为 Ife 的课题都是裸写 HTML，去配置了一下 emmet 发现前端开发速度飞了起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSButton</title>
    <link href="http://yoursite.com/2017/02/12/NSButton/"/>
    <id>http://yoursite.com/2017/02/12/NSButton/</id>
    <published>2017-02-12T11:50:38.000Z</published>
    <updated>2017-03-01T06:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来讨论另一个常用的控件</p>
<p>结束了 NSTextField 的封装后开始封装下一个控件 NSButton</p>
<p>效果如下</p>
<a id="more"></a>
<p><img src="/images/NSButton/demo.png" alt=""></p>
<ol>
<li>
<p>修改背景颜色，Cocoa 里面尴尬的问题有很多，比如 storyboard 中可以设置的属性实在太少，在 iOS 开发中背景颜色文字颜色都可以在 storyboard 中直接设置，到了 macOS 开发的时候全都没了…</p>
<p><a href="http://stackoverflow.com/questions/29387102/how-to-set-background-color-of-nsbutton-osx" target="_blank" rel="external">how to set background color of NSButton OSX</a> 里面提到了几种方法</p>
<ul>
<li>继承一个 NSButton 重写 draw 函数，这个方法的坏处是因为是重写了 draw 函数，所以绘制文字的代码也要重写否则会只剩下背景而没有文字</li>
</ul>
<pre class="highlight"><code class="swift"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">(<span class="number">_</span> dirtyRect: NSRect)</span></span> {
  <span class="keyword">super</span>.draw(dirtyRect)
  
  <span class="type">NSColor</span>.blue.setFill()
  <span class="type">NSRectFill</span>(dirtyRect)
}
</code></pre>
<ul>
<li>改变 NSButton layer 的颜色即背景颜色</li>
</ul>
<pre class="highlight"><code class="swift"><span class="keyword">self</span>.wantsLayer = <span class="literal">true</span>
<span class="keyword">self</span>.layer?.backgroundColor = <span class="type">NSColor</span>.blue.cgColor
</code></pre>
<p>这个方法比较简洁容易实现，但是在 github open issue 里面找到一个回答</p>
<blockquote>
<p>// in swift:<br>
(button.cell as! NSButtonCell).bordered = false //The background color is used only when drawing borderless buttons.<br>
(button.cell as! NSButtonCell).backgroundColor = NSColor.redColor()</p>
</blockquote>
</li>
<li>
<p>修改文字颜色字体等属性，这个可以使用 NSAttributedString 这个类来实现，NSButton 中有个属性叫 attributedTitle，通过修改这个属性就能实现文字属性的修改</p>
<pre class="highlight"><code class="swift"><span class="keyword">let</span> paraStyle = <span class="type">NSMutableParagraphStyle</span>()
paraStyle.alignment = .center
<span class="keyword">self</span>.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="keyword">self</span>.title, attributes: [<span class="type">NSForegroundColorAttributeName</span>: fontColor, <span class="type">NSFontAttributeName</span>: <span class="type">NSFont</span>.systemFont(ofSize: fontSize), <span class="type">NSParagraphStyleAttributeName</span> : paraStyle])
</code></pre>
<p>在这个例子中通过 NSAttributedString 设置了三个属性：文字颜色，字体和段落样式，NSAttributedString 的 attributes 是 [String: Any] 的字典，所有属性可以参考 <a href="https://developer.apple.com/reference/foundation/nsattributedstring/character_attributes" target="_blank" rel="external">Character Attributes</a>，比较常用的有：NSBackgroundColorAttributeName、NSFontAttributeName、NSForegroundColorAttributeName、NSShadowAttributeName、NSUnderlineColorAttributeName</p>
<p>因为设置字体和颜色的时候将 attributedTitle 重置了，因此对齐属性也被覆盖掉，因此要重新设置居中对齐</p>
</li>
<li>
<p>设置居中对齐的时候通过 NSMutableParagraphStyle 来设置段落属性，看名字也知道它是继承自 <a href="https://developer.apple.com/reference/uikit/nsparagraphstyle" target="_blank" rel="external">NSParagraphStyle</a>，NSParagraphStyle 可以设置段落的对齐、缩进、行高、空格等属性，最后将设置好的属性赋给 attributedTitle 的 NSParagraphStyleAttributeName 属性就可以实现想要的段落布局了</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来讨论另一个常用的控件&lt;/p&gt;
&lt;p&gt;结束了 NSTextField 的封装后开始封装下一个控件 NSButton&lt;/p&gt;
&lt;p&gt;效果如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSTextField @2</title>
    <link href="http://yoursite.com/2017/02/08/%20NSTextField1/"/>
    <id>http://yoursite.com/2017/02/08/ NSTextField1/</id>
    <published>2017-02-08T06:56:36.000Z</published>
    <updated>2017-03-02T04:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来以为一次已经把 NSTextField 的坑踩完了，没想到又陷进去一天…</p>
<p>上次把基本的绘制样式实现好了，接下来只想实现一个小功能，就是判断下哪个输入框处于有焦点的状态然后高亮下边线就可以了</p>
<a id="more"></a>
<p><img src="/images/NSTextField1/demo.png" alt=""></p>
<ol>
<li>
<p>最容易想到的就是 NSText Delegate 函数</p>
<pre class="highlight"><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">textShouldBeginEditing</span><span class="params">(NSText)</span></span>
<span class="function"><span class="keyword">func</span> <span class="title">textDidBeginEditing</span><span class="params">(Notification)</span></span>

<span class="function"><span class="keyword">func</span> <span class="title">textShouldEndEditing</span><span class="params">(NSText)</span></span>
<span class="function"><span class="keyword">func</span> <span class="title">textDidEndEditing</span><span class="params">(Notification)</span></span>
</code></pre>
<p>用这一套方案其实已经可以实现比较接近的效果。只有一个小问题就是因为高亮的代码写在 text(Should|Did)BeginEditing 函数中，只有当开始输入第一个字符的时候才会高亮下边线，当光标移动过去时是不产生高亮的</p>
</li>
<li>
<p>然后想到了可以判断是否是 first responder 来判断焦点是否处于输入框，然后修改颜色，重写 NSResponder 的函数</p>
<pre class="highlight"><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">becomeFirstResponder</span><span class="params">()</span></span>
<span class="function"><span class="keyword">func</span> <span class="title">resignFirstResponder</span><span class="params">()</span></span>
</code></pre>
<p>这样只要在 become/resign first responder 的时候修改颜色就可以，而且时机完全正确，本以为找到了最好的解决方案</p>
<p>but…</p>
<p>问题又来了，因为效果不对所以在两个函数中加入了输出语句，打印出的结果竟然 resignFirstResponder 在 becomeFirstResponder 执行结束就立即被调用了</p>
<p><img src="/images/NSTextField1/print.png" alt=""></p>
<p>然后继续感谢 google，在一篇很老的帖子里找到了解释 <a href="http://www.cocoabuilder.com/archive/cocoa/103607-resignfirstresponder-called-immediately.html" target="_blank" rel="external">resignFirstResponder called immediately</a></p>
<blockquote>
<p>When a text field is being edited, the shared “field editor” object<br>
is used as the first responder, not the text field. Check out the<br>
documentation for the NSWindow method fieldEditor:forObject: for more<br>
information on this.</p>
</blockquote>
<p>因为当输入框进行输入时实际上成为 first responder 的是一个通用于整个 window 所有输入框的 field editor，因此其他的 textfield 当光标移入时只会通知一下 become first responder 然后立刻进入编辑状态时就会把 first responder 让给 field editor，所以永远不会绘制高亮下边线</p>
</li>
<li>
<p>最后又选择了一个折中的方案，使用下面两个函数</p>
<pre class="highlight"><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">becomeFirstResponder</span><span class="params">()</span></span>
<span class="function"><span class="keyword">func</span> <span class="title">textDidEndEditing</span><span class="params">(Notification)</span></span>
</code></pre>
<p>这样尽管 become first responder 后立刻就 resign first responder 但仍然处于编辑状态，还是会处于高亮下边线的状态，停止编辑后也能立即切换高亮</p>
<p><img src="/images/NSTextField1/demo.gif" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来以为一次已经把 NSTextField 的坑踩完了，没想到又陷进去一天…&lt;/p&gt;
&lt;p&gt;上次把基本的绘制样式实现好了，接下来只想实现一个小功能，就是判断下哪个输入框处于有焦点的状态然后高亮下边线就可以了&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSTextField @1</title>
    <link href="http://yoursite.com/2017/02/05/NSTextField/"/>
    <id>http://yoursite.com/2017/02/05/NSTextField/</id>
    <published>2017-02-05T14:03:33.000Z</published>
    <updated>2017-03-02T05:03:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>突发奇想做一个 mac 上的 app，本来以为借着 iOS 的开发经验应该会比较顺利，发现 macOS 整个就一大坑…国内的资料基本没有，还是靠着 google + stackoverflow 才活了下来</p>
<p>这个系列不是从一个很高的层次很概括地讲解控件，而是记录在开发过程中带着问题去学到的知识和解决的问题，所以条理上可能有点混乱而且偏重实际</p>
<a id="more"></a>
<p>首先做一个 app 要做一个登录页面，登录自然需要输入框，输入框的样式定为这样</p>
<p><img src="/images/NSTextField/demo.png" alt=""></p>
<p>虽然这个样式实现起来其实很简单，到最后只写了 20 行代码，但是坑却踩了一天…</p>
<p>为了复用直接继承一个 NSTextField，要解决的问题如下：</p>
<ol>
<li>
<p>首先要解决的是当处于编辑状态的输入框外部有一圈蓝色的高亮边框以及自带的灰色的外边框都要去掉，只要修改两个属性即可</p>
<pre class="highlight"><code class="swift"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> {
	<span class="keyword">self</span>.focusRingType = .<span class="keyword">none</span>
	<span class="keyword">self</span>.isBordered = <span class="literal">false</span> 
}
</code></pre>
<p>因为比较懒喜欢用 storyboard 所以把这两句写到了 awakeFromNib 函数中，当从 storyboard 初始化之后会调用这个函数，这样只要在 storyboard 中拖控件然后改下类就可以了</p>
</li>
<li>
<p>然后要解决自定义下边线的问题，这个需要重写 draw 方法，用贝塞尔曲线画条直线就行了</p>
<pre class="highlight"><code class="swift"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">(<span class="number">_</span> dirtyRect: NSRect)</span></span> {
    <span class="keyword">super</span>.draw(dirtyRect)
    
    <span class="keyword">let</span> rect = <span class="keyword">self</span>.bounds
    
    <span class="keyword">let</span> underLine = <span class="type">NSBezierPath</span>()
    <span class="comment">// 离底边距离2，否则移除边框时会把这条线也裁出去</span>
    underLine.move(to: <span class="type">NSPoint</span>(x: <span class="number">1</span>, y: rect.height - <span class="number">2</span>))
    <span class="comment">// 左右宽度分别缩回1，看起来舒服些</span>
    underLine.line(to: <span class="type">NSPoint</span>(x: rect.width - <span class="number">1</span>, y: rect.height - <span class="number">2</span>))
    underLine.lineWidth = <span class="number">2</span>
    <span class="type">NSColor</span>.red.setStroke()
    underLine.stroke()
  }
</code></pre>
</li>
<li>
<p>最后的一个问题，本来想把输入框的文字弄成垂直居中，发现 macOS 没有这个属性，然后发现 NSTextField 的结构竟然是 NSTextField 中添加了一个 NSTextFieldCell 这个 Cell 感觉才是我们平常理解的 TextField，可以设置文字颜色背景颜色提示信息是否可编辑等属性，而 NSTextField 好像只是外面套的一层壳，但是又不像其他包含关系那样容易设置位置关系，最后想着反正没有上边框把高度调适中看起来就像垂直居中了…</p>
</li>
<li>
<p>在 2 中画了一条红色底边线，但是当画完后调整位置发现看不到这条线了，调整了半天发现是中间的 NSTextFieldCell 默认背景颜色是白色，而重绘 NSTextField 时是在下层重绘，这条线被盖住了，当然如果再继承一个 NSTextFieldCell 然后在 NSTextFieldCell 中重绘的话也可以</p>
</li>
<li>
<p>尝试垂直居中的过程中在 stackoverflow 中找到了一个很厉害的答案 [<a href="http://stackoverflow.com/questions/1235219/is-there-a-right-way-to-have-nstextfieldcell-draw-vertically-centered-text" target="_blank" rel="external">Is there a “right” way to have NSTextFieldCell draw vertically centered text?</a>](<a href="http://stackoverflow.com/questions/1235219/is-there-a-right-way-to-have-nstextfieldcell-draw-vertically-centered-text" target="_blank" rel="external">http://stackoverflow.com/questions/1235219/is-there-a-right-way-to-have-nstextfieldcell-draw-vertically-centered-text</a>)</p>
<pre class="highlight"><code class="swift"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawInterior</span><span class="params">(withFrame cellFrame: NSRect, <span class="keyword">in</span> controlView: NSView)</span></span> {
      <span class="keyword">self</span>.attributedStringValue.draw(<span class="keyword">in</span>: <span class="type">NSRect</span>())
  }
</code></pre>
<p>在这个函数里修改文字的绘制位置可以做到垂直居中的效果，但是尝试过发现了一个问题，这个方法适用于静态文字，就是 label。因为在 Cocoa 中虽然区分 label 和 textfield 但两种控件本质都是 NSTextField，只不过里面的子视图不同。label 的文字带定义时就确定了，可以用这种方法绘制，但 textfield 是交互性的，使用这种方法时很麻烦的是指针输入还是在原来顶端的位置，边输入边在下面绘制同样的文字</p>
<p><img src="/images/NSTextField/wrong.png" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突发奇想做一个 mac 上的 app，本来以为借着 iOS 的开发经验应该会比较顺利，发现 macOS 整个就一大坑…国内的资料基本没有，还是靠着 google + stackoverflow 才活了下来&lt;/p&gt;
&lt;p&gt;这个系列不是从一个很高的层次很概括地讲解控件，而是记录在开发过程中带着问题去学到的知识和解决的问题，所以条理上可能有点混乱而且偏重实际&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
</feed>
