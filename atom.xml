<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuki</title>
  <subtitle>Otaku</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-26T09:23:00.190Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bewils</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 中的多线程</title>
    <link href="http://yoursite.com/2017/08/26/iOS%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/26/iOS中的多线程/</id>
    <published>2017-08-26T06:10:42.000Z</published>
    <updated>2017-08-26T09:23:00.190Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS 中, 我们经常会把比较耗时的操作通过异步的方式运行, 最主要的使用场合大概就是网络通信了&lt;/p&gt;
&lt;p&gt;我们可能都会写过这样的代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Swift&quot;&gt;DispatchQueue.global().async {
  // get data from networking
  DispatchQueue.main.async {
    // update ui
  }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>记一次动画封装</title>
    <link href="http://yoursite.com/2017/08/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8A%A8%E7%94%BB%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2017/08/24/记一次动画封装/</id>
    <published>2017-08-24T14:29:28.000Z</published>
    <updated>2017-08-24T16:58:41.332Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;⚠️ &lt;strong&gt;警告&lt;/strong&gt;: 本文中的代码非常恶心, 可能引起身体不适, 请谨慎阅读(当然本文的代码主要就是想恶心到人), 当然如果能够坚持看下去, 说不定会变舒服&lt;/p&gt;
&lt;p&gt;最近在公司的项目中需要将动画封装来使用, 主要需求有两个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;像 SKAction 一样支持, start, pause, resume, cancel&lt;/li&gt;
&lt;li&gt;统一 UIView 和 CALayer 的动画&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后开始进行了封装, 最后总算是写完了吧, 写的过程中向公司的大佬学习了很多&lt;/p&gt;
&lt;p&gt;因此写了这篇文章, 主要想记录一下让代码从能运行到写起来和用起来都很舒服的一个过程吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf 简介及简单应用</title>
    <link href="http://yoursite.com/2017/08/14/Protobuf/"/>
    <id>http://yoursite.com/2017/08/14/Protobuf/</id>
    <published>2017-08-14T14:05:11.000Z</published>
    <updated>2017-08-15T16:40:02.936Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Protobuf 是 protocol buffers 的缩写. 根据&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;官网&lt;/a&gt;的说法, protocol buffers 与平台无关, 与语言无关, 实现数据序列化的一种手段. 正如名字一样, protobuf 可以将数据按照规定的协议(protocol)序列化为二进制的数据(buffers). 序列化的数据基本上可以保证类型安全, 并且可以压缩大小. 这篇文章将简单说说关于 protobuf 的优点和问题, 如果有使用的需要可以作为参考&lt;/p&gt;
    
    </summary>
    
    
      <category term="Basic" scheme="http://yoursite.com/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Swift4 JSON 解析</title>
    <link href="http://yoursite.com/2017/08/07/Swift4codable/"/>
    <id>http://yoursite.com/2017/08/07/Swift4codable/</id>
    <published>2017-08-07T14:05:52.000Z</published>
    <updated>2017-08-24T14:33:25.639Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Swift 的 JSON 解析一直是一件很麻烦的事, 在 Swift3 中请求一个数据后可能要进行如下操作(比如服务器返回一个数组):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;if let jsonObject = try? JSONSerialization.jsonObject(with: data!, options: .allowFragments) {
  if let objectList = jsonObject as? [Any] {
    for object in objectList {
      if let object = object as? [String: Any] {
        // use object
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS11 大标题</title>
    <link href="http://yoursite.com/2017/06/12/BigTitle/"/>
    <id>http://yoursite.com/2017/06/12/BigTitle/</id>
    <published>2017-06-12T15:29:11.000Z</published>
    <updated>2017-06-12T17:34:45.029Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS11 中苹果推出了新的设计风格 Complexion Reduction，其中一个很直观的特点就是大标题的使用：&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s new in swift4</title>
    <link href="http://yoursite.com/2017/06/09/Swift4/"/>
    <id>http://yoursite.com/2017/06/09/Swift4/</id>
    <published>2017-06-09T06:55:03.000Z</published>
    <updated>2017-08-24T14:33:19.456Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这次 WWDC 最令你激动的更新是什么？&lt;/p&gt;
&lt;p&gt;最令我激动的是 swift 没更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而并不是这样，只不过 keynote 中偏重新品发布没提到就以为没有更新了？Github 上 swift 的更新进程仍在继续，新添加的特性和修复的 bug 也不断增多。Swift 作为一门现代语言正向着更好的方向发展，在这篇文章中将主要讨论 swift4 中主要的变化&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>圆形扇形等一系列问题</title>
    <link href="http://yoursite.com/2017/04/07/CircleAnimation/"/>
    <id>http://yoursite.com/2017/04/07/CircleAnimation/</id>
    <published>2017-04-07T00:30:36.000Z</published>
    <updated>2017-04-07T00:34:59.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;画圆形的方法&quot;&gt;&lt;a href=&quot;#画圆形的方法&quot; class=&quot;headerlink&quot; title=&quot;画圆形的方法&quot;&gt;&lt;/a&gt;画圆形的方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UIBezierPath(ovalIn: CGRect) 给定一个矩形的范围在其中画一个内接圆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UIBezierPath(arcCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参数列表为弧形中心，半径，开始角度，结束角度，方向是否为顺时针&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS AutoLayout</title>
    <link href="http://yoursite.com/2017/03/27/AutoLayout/"/>
    <id>http://yoursite.com/2017/03/27/AutoLayout/</id>
    <published>2017-03-26T16:50:49.000Z</published>
    <updated>2017-06-12T16:47:12.664Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开始写起了 Playgroundbook，作为重度 storyboard 用户不管做什么项目都喜欢把能可视化的控件都扔到 storyboard 中，通过 storyboard 就能看到整个 App 的样式。结果 Playgroundbook 没法使用 storyboard 简直悲剧，样式看不到也就算了，布局还日常崩。用 frame 布局写得实在难受，还是正经学一下如何用代码来实现 AutoLayout&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Ife 课程笔记 @1</title>
    <link href="http://yoursite.com/2017/03/01/Ife1/"/>
    <id>http://yoursite.com/2017/03/01/Ife1/</id>
    <published>2017-03-01T02:59:53.000Z</published>
    <updated>2017-03-01T10:18:55.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开始参加百度 2017 年前端技术学院，发现基础还是有点烂，记个笔记作为补充。&lt;/p&gt;
&lt;h2 id=&quot;Emmet&quot;&gt;&lt;a href=&quot;#Emmet&quot; class=&quot;headerlink&quot; title=&quot;Emmet&quot;&gt;&lt;/a&gt;Emmet&lt;/h2&gt;&lt;p&gt;首先是开发效率上面，因为过去常年使用 koa + pug(jade) 快速搭建前后端项目，或者使用 React 这种全面的前端框架，一直没有机会去尝试 emmet 这种神奇的代码生成工具。因为 Ife 的课题都是裸写 HTML，去配置了一下 emmet 发现前端开发速度飞了起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSButton</title>
    <link href="http://yoursite.com/2017/02/12/NSButton/"/>
    <id>http://yoursite.com/2017/02/12/NSButton/</id>
    <published>2017-02-12T11:50:38.000Z</published>
    <updated>2017-03-01T06:39:24.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天来讨论另一个常用的控件&lt;/p&gt;
&lt;p&gt;结束了 NSTextField 的封装后开始封装下一个控件 NSButton&lt;/p&gt;
&lt;p&gt;效果如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSTextField @2</title>
    <link href="http://yoursite.com/2017/02/08/%20NSTextField1/"/>
    <id>http://yoursite.com/2017/02/08/ NSTextField1/</id>
    <published>2017-02-08T06:56:36.000Z</published>
    <updated>2017-03-02T04:34:35.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本来以为一次已经把 NSTextField 的坑踩完了，没想到又陷进去一天…&lt;/p&gt;
&lt;p&gt;上次把基本的绘制样式实现好了，接下来只想实现一个小功能，就是判断下哪个输入框处于有焦点的状态然后高亮下边线就可以了&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 开发入门 NSTextField @1</title>
    <link href="http://yoursite.com/2017/02/05/NSTextField/"/>
    <id>http://yoursite.com/2017/02/05/NSTextField/</id>
    <published>2017-02-05T14:03:33.000Z</published>
    <updated>2017-03-02T05:03:38.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;突发奇想做一个 mac 上的 app，本来以为借着 iOS 的开发经验应该会比较顺利，发现 macOS 整个就一大坑…国内的资料基本没有，还是靠着 google + stackoverflow 才活了下来&lt;/p&gt;
&lt;p&gt;这个系列不是从一个很高的层次很概括地讲解控件，而是记录在开发过程中带着问题去学到的知识和解决的问题，所以条理上可能有点混乱而且偏重实际&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yoursite.com/tags/macOS/"/>
    
  </entry>
  
</feed>
